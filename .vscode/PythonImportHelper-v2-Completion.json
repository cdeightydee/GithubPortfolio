[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Rect",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "sample",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randrange",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randrange",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "seed",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randrange",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randrange",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "util.vector2d",
        "description": "util.vector2d",
        "isExtraImport": true,
        "detail": "util.vector2d",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "util.geometry",
        "description": "util.geometry",
        "isExtraImport": true,
        "detail": "util.geometry",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "util.vectorsprites",
        "description": "util.vectorsprites",
        "isExtraImport": true,
        "detail": "util.vectorsprites",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "util.vectorsprites",
        "description": "util.vectorsprites",
        "isExtraImport": true,
        "detail": "util.vectorsprites",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "util.vectorsprites",
        "description": "util.vectorsprites",
        "isExtraImport": true,
        "detail": "util.vectorsprites",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "util.vectorsprites",
        "description": "util.vectorsprites",
        "isExtraImport": true,
        "detail": "util.vectorsprites",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ship",
        "description": "ship",
        "isExtraImport": true,
        "detail": "ship",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "stage",
        "description": "stage",
        "isExtraImport": true,
        "detail": "stage",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "badies",
        "description": "badies",
        "isExtraImport": true,
        "detail": "badies",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "shooter",
        "description": "shooter",
        "isExtraImport": true,
        "detail": "shooter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "shooter",
        "description": "shooter",
        "isExtraImport": true,
        "detail": "shooter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "shooter",
        "description": "shooter",
        "isExtraImport": true,
        "detail": "shooter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "soundManager",
        "description": "soundManager",
        "isExtraImport": true,
        "detail": "soundManager",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "soundManager",
        "description": "soundManager",
        "isExtraImport": true,
        "detail": "soundManager",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "soundManager",
        "description": "soundManager",
        "isExtraImport": true,
        "detail": "soundManager",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "scipy.sparse.linalg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scipy.sparse.linalg",
        "description": "scipy.sparse.linalg",
        "detail": "scipy.sparse.linalg",
        "documentation": {}
    },
    {
        "label": "scipy.sparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scipy.sparse",
        "description": "scipy.sparse",
        "detail": "scipy.sparse",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "ABCMeta",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "load_sprite",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "load",
        "importPath": "pygame.image",
        "description": "pygame.image",
        "isExtraImport": true,
        "detail": "pygame.image",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "fibo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fibo",
        "description": "fibo",
        "detail": "fibo",
        "documentation": {}
    },
    {
        "label": "fib",
        "importPath": "fibo",
        "description": "fibo",
        "isExtraImport": true,
        "detail": "fibo",
        "documentation": {}
    },
    {
        "label": "turtle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "turtle",
        "description": "turtle",
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "turtle",
        "description": "turtle",
        "isExtraImport": true,
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pdb",
        "description": "pdb",
        "detail": "pdb",
        "documentation": {}
    },
    {
        "label": "block",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "block",
        "description": "block",
        "detail": "block",
        "documentation": {}
    },
    {
        "label": "constants",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "constants",
        "description": "constants",
        "detail": "constants",
        "documentation": {}
    },
    {
        "label": "PySimpleGUI",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PySimpleGUI",
        "description": "PySimpleGUI",
        "detail": "PySimpleGUI",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "gym",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gym",
        "description": "gym",
        "detail": "gym",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Label",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Tk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "winsound",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winsound",
        "description": "winsound",
        "detail": "winsound",
        "documentation": {}
    },
    {
        "label": "playsound",
        "importPath": "playsound",
        "description": "playsound",
        "isExtraImport": true,
        "detail": "playsound",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Employees",
        "importPath": "Employees",
        "description": "Employees",
        "isExtraImport": true,
        "detail": "Employees",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "requests,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests.",
        "description": "requests.",
        "detail": "requests.",
        "documentation": {}
    },
    {
        "label": "vector",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "vector",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "vector",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "vector",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "line",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "vector",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "line",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "square",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "square",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "line",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "square",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "vector",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "vector",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "square",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "vector",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "square",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "vector",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "line",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "vector",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "square",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "vector",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "vector",
        "importPath": "freegames",
        "description": "freegames",
        "isExtraImport": true,
        "detail": "freegames",
        "documentation": {}
    },
    {
        "label": "cycle",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "ascii_lowercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "calculateGradient",
        "kind": 2,
        "importPath": "Python.Asteroids-Game-main.util.geometry",
        "description": "Python.Asteroids-Game-main.util.geometry",
        "peekOfCode": "def calculateGradient(p1, p2):\n    # Ensure that the line is not vertical\n    if (p1[0] != p2[0]):\n        m = (p1[1] - p2[1]) / (p1[0] - p2[0])\n        return m\n    else:\n        return None\n# Calc the point 'b' where line crosses the Y axis\ndef calculateYAxisIntersect(p, m):\n    return p[1] - (m * p[0])",
        "detail": "Python.Asteroids-Game-main.util.geometry",
        "documentation": {}
    },
    {
        "label": "calculateYAxisIntersect",
        "kind": 2,
        "importPath": "Python.Asteroids-Game-main.util.geometry",
        "description": "Python.Asteroids-Game-main.util.geometry",
        "peekOfCode": "def calculateYAxisIntersect(p, m):\n    return p[1] - (m * p[0])\n# Calc the point where two infinitely long lines (p1 to p2 and p3 to p4) intersect.\n# Handle parallel lines and vertical lines (the later has infinate 'm').\n# Returns a point tuple of points like this ((x,y),...)  or None\n# In non parallel cases the tuple will contain just one point.\n# For parallel lines that lay on top of one another the tuple will contain\n# all four points of the two lines\ndef getIntersectPoint(p1, p2, p3, p4):\n    m1 = calculateGradient(p1, p2)",
        "detail": "Python.Asteroids-Game-main.util.geometry",
        "documentation": {}
    },
    {
        "label": "getIntersectPoint",
        "kind": 2,
        "importPath": "Python.Asteroids-Game-main.util.geometry",
        "description": "Python.Asteroids-Game-main.util.geometry",
        "peekOfCode": "def getIntersectPoint(p1, p2, p3, p4):\n    m1 = calculateGradient(p1, p2)\n    m2 = calculateGradient(p3, p4)\n    # See if the the lines are parallel\n    if (m1 != m2):\n        # Not parallel\n        # See if either line is vertical\n        if (m1 is not None and m2 is not None):\n            # Neither line vertical\n            b1 = calculateYAxisIntersect(p1, m1)",
        "detail": "Python.Asteroids-Game-main.util.geometry",
        "documentation": {}
    },
    {
        "label": "calculateIntersectPoint",
        "kind": 2,
        "importPath": "Python.Asteroids-Game-main.util.geometry",
        "description": "Python.Asteroids-Game-main.util.geometry",
        "peekOfCode": "def calculateIntersectPoint(p1, p2, p3, p4):\n    p = getIntersectPoint(p1, p2, p3, p4)\n    if p is not None:\n        width = p2[0] - p1[0]\n        height = p2[1] - p1[1]\n        r1 = Rect(p1, (width, height))\n        r1.normalize()\n        width = p4[0] - p3[0]\n        height = p4[1] - p3[1]\n        r2 = Rect(p3, (width, height))",
        "detail": "Python.Asteroids-Game-main.util.geometry",
        "documentation": {}
    },
    {
        "label": "Vector2d",
        "kind": 6,
        "importPath": "Python.Asteroids-Game-main.util.vector2d",
        "description": "Python.Asteroids-Game-main.util.vector2d",
        "peekOfCode": "class Vector2d:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n# needs a copy constructor and method for vector addition etc",
        "detail": "Python.Asteroids-Game-main.util.vector2d",
        "documentation": {}
    },
    {
        "label": "VectorSprite",
        "kind": 6,
        "importPath": "Python.Asteroids-Game-main.util.vectorsprites",
        "description": "Python.Asteroids-Game-main.util.vectorsprites",
        "peekOfCode": "class VectorSprite:\n    def __init__(self, position, heading, pointlist, angle=0, color=(255, 255, 255)):\n        self.position = position\n        self.heading = heading\n        self.angle = angle\n        self.vAngle = 0\n        self.pointlist = pointlist  # raw pointlist\n        self.color = color\n        self.ttl = 25\n        #self.color = color = (random.randrange(40,255),random.randrange(40,255),random.randrange(40,255))",
        "detail": "Python.Asteroids-Game-main.util.vectorsprites",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 6,
        "importPath": "Python.Asteroids-Game-main.util.vectorsprites",
        "description": "Python.Asteroids-Game-main.util.vectorsprites",
        "peekOfCode": "class Point(VectorSprite):\n    # Class attributes\n    pointlist = [(0, 0), (1, 1), (1, 0), (0, 1)]\n    def __init__(self, position, heading, stage):\n        VectorSprite.__init__(self, position, heading, self.pointlist)\n        self.stage = stage\n        self.ttl = 30\n    def move(self):\n        self.ttl -= 1\n        if (self.ttl <= 0):",
        "detail": "Python.Asteroids-Game-main.util.vectorsprites",
        "documentation": {}
    },
    {
        "label": "Asteroids",
        "kind": 6,
        "importPath": "Python.Asteroids-Game-main.asteroids",
        "description": "Python.Asteroids-Game-main.asteroids",
        "peekOfCode": "class Asteroids():\n    explodingTtl = 180\n    def __init__(self):\n        self.stage = Stage('Asteroids', (1024, 768))\n        self.paused = False\n        self.showingFPS = False\n        self.frameAdvance = False\n        self.gameState = \"attract_mode\"\n        self.rockList = []\n        self.createRocks(3)",
        "detail": "Python.Asteroids-Game-main.asteroids",
        "documentation": {}
    },
    {
        "label": "game",
        "kind": 5,
        "importPath": "Python.Asteroids-Game-main.asteroids",
        "description": "Python.Asteroids-Game-main.asteroids",
        "peekOfCode": "game = Asteroids()  # create object game from class Asteroids\ngame.playGame()\n####",
        "detail": "Python.Asteroids-Game-main.asteroids",
        "documentation": {}
    },
    {
        "label": "Rock",
        "kind": 6,
        "importPath": "Python.Asteroids-Game-main.badies",
        "description": "Python.Asteroids-Game-main.badies",
        "peekOfCode": "class Rock(VectorSprite):\n    # indexes into the tuples below\n    largeRockType = 0\n    mediumRockType = 1\n    smallRockType = 2   \n    velocities = (1.5, 3.0, 4.5)    \n    scales = (2.5, 1.5, 0.6)\n    # tracks the last rock shape to be generated\n    rockShape = 1    \n    # Create the rock polygon to the given scale",
        "detail": "Python.Asteroids-Game-main.badies",
        "documentation": {}
    },
    {
        "label": "Debris",
        "kind": 6,
        "importPath": "Python.Asteroids-Game-main.badies",
        "description": "Python.Asteroids-Game-main.badies",
        "peekOfCode": "class Debris(Point):    \n    def __init__(self, position, stage):\n        heading = Vector2d(random.uniform(-1.5, 1.5), random.uniform(-1.5, 1.5))\n        Point.__init__(self, position, heading, stage)\n        self.ttl = 50\n    def move(self):    \n        Point.move(self)\n        r,g,b = self.color\n        r -= 5\n        g -= 5",
        "detail": "Python.Asteroids-Game-main.badies",
        "documentation": {}
    },
    {
        "label": "Saucer",
        "kind": 6,
        "importPath": "Python.Asteroids-Game-main.badies",
        "description": "Python.Asteroids-Game-main.badies",
        "peekOfCode": "class Saucer(Shooter):\n    # indexes into the tuples below\n    largeSaucerType = 0\n    smallSaucerType = 1\n    velocities = (1.5, 2.5)    \n    scales = (1.5, 1.0)\n    scores = (500, 1000)\n    pointlist = [(-9,0), (-3,-3), (-2,-6), (-2,-6), (2,-6), (3,-3), (9,0), (-9,0), (-3,4), (3,4), (9,0)]\n    maxBullets = 1\n    bulletTtl = [60, 90]",
        "detail": "Python.Asteroids-Game-main.badies",
        "documentation": {}
    },
    {
        "label": "Ship",
        "kind": 6,
        "importPath": "Python.Asteroids-Game-main.ship",
        "description": "Python.Asteroids-Game-main.ship",
        "peekOfCode": "class Ship(Shooter):\n    # Class attributes\n    acceleration = 0.2\n    decelaration = -0.005\n    maxVelocity = 10\n    turnAngle = 6\n    bulletVelocity = 13.0\n    maxBullets = 4\n    bulletTtl = 35\n    def __init__(self, stage):",
        "detail": "Python.Asteroids-Game-main.ship",
        "documentation": {}
    },
    {
        "label": "ThrustJet",
        "kind": 6,
        "importPath": "Python.Asteroids-Game-main.ship",
        "description": "Python.Asteroids-Game-main.ship",
        "peekOfCode": "class ThrustJet(VectorSprite):\n    pointlist = [(-3, 7), (0, 13), (3, 7)]\n    def __init__(self, stage, ship):\n        position = Vector2d(stage.width/2, stage.height/2)\n        heading = Vector2d(0, 0)\n        self.accelerating = False\n        self.ship = ship\n        VectorSprite.__init__(self, position, heading, self.pointlist)\n    def draw(self):\n        if self.accelerating and self.ship.inHyperSpace == False:",
        "detail": "Python.Asteroids-Game-main.ship",
        "documentation": {}
    },
    {
        "label": "Shooter",
        "kind": 6,
        "importPath": "Python.Asteroids-Game-main.shooter",
        "description": "Python.Asteroids-Game-main.shooter",
        "peekOfCode": "class Shooter(VectorSprite):\n    def __init__(self, position, heading, pointlist, stage):\n        VectorSprite.__init__(self, position, heading, pointlist)\n        self.bullets = []\n        self.stage = stage\n    def fireBullet(self, heading, ttl, velocity):\n        if (len(self.bullets) < self.maxBullets):\n            position = Vector2d(self.position.x, self.position.y)\n            newBullet = Bullet(position, heading, self,\n                               ttl, velocity, self.stage)",
        "detail": "Python.Asteroids-Game-main.shooter",
        "documentation": {}
    },
    {
        "label": "Bullet",
        "kind": 6,
        "importPath": "Python.Asteroids-Game-main.shooter",
        "description": "Python.Asteroids-Game-main.shooter",
        "peekOfCode": "class Bullet(Point):\n    def __init__(self, position, heading, shooter, ttl, velocity, stage):\n        Point.__init__(self, position, heading, stage)\n        self.shooter = shooter\n        self.ttl = ttl\n        self.velocity = velocity\n    def move(self):\n        Point.move(self)\n        if (self.ttl <= 0):\n            self.shooter.bullets.remove(self)",
        "detail": "Python.Asteroids-Game-main.shooter",
        "documentation": {}
    },
    {
        "label": "initSoundManager",
        "kind": 2,
        "importPath": "Python.Asteroids-Game-main.soundManager",
        "description": "Python.Asteroids-Game-main.soundManager",
        "peekOfCode": "def initSoundManager():\n    pygame.mixer.init()\n    sounds[\"fire\"] = pygame.mixer.Sound(\"../res/FIRE.WAV\")\n    sounds[\"explode1\"] = pygame.mixer.Sound(\"../res/EXPLODE1.WAV\")\n    sounds[\"explode2\"] = pygame.mixer.Sound(\"../res/EXPLODE2.WAV\")\n    sounds[\"explode3\"] = pygame.mixer.Sound(\"../res/EXPLODE3.WAV\")\n    sounds[\"lsaucer\"] = pygame.mixer.Sound(\"../res/LSAUCER.WAV\")\n    sounds[\"ssaucer\"] = pygame.mixer.Sound(\"../res/SSAUCER.WAV\")\n    sounds[\"thrust\"] = pygame.mixer.Sound(\"../res/THRUST.WAV\")\n    sounds[\"sfire\"] = pygame.mixer.Sound(\"../res/SFIRE.WAV\")",
        "detail": "Python.Asteroids-Game-main.soundManager",
        "documentation": {}
    },
    {
        "label": "playSound",
        "kind": 2,
        "importPath": "Python.Asteroids-Game-main.soundManager",
        "description": "Python.Asteroids-Game-main.soundManager",
        "peekOfCode": "def playSound(soundName):\n    channel = sounds[soundName].play()\ndef playSoundContinuous(soundName):\n    channel = sounds[soundName].play(-1)\ndef stopSound(soundName):\n    channel = sounds[soundName].stop()",
        "detail": "Python.Asteroids-Game-main.soundManager",
        "documentation": {}
    },
    {
        "label": "playSoundContinuous",
        "kind": 2,
        "importPath": "Python.Asteroids-Game-main.soundManager",
        "description": "Python.Asteroids-Game-main.soundManager",
        "peekOfCode": "def playSoundContinuous(soundName):\n    channel = sounds[soundName].play(-1)\ndef stopSound(soundName):\n    channel = sounds[soundName].stop()",
        "detail": "Python.Asteroids-Game-main.soundManager",
        "documentation": {}
    },
    {
        "label": "stopSound",
        "kind": 2,
        "importPath": "Python.Asteroids-Game-main.soundManager",
        "description": "Python.Asteroids-Game-main.soundManager",
        "peekOfCode": "def stopSound(soundName):\n    channel = sounds[soundName].stop()",
        "detail": "Python.Asteroids-Game-main.soundManager",
        "documentation": {}
    },
    {
        "label": "sounds",
        "kind": 5,
        "importPath": "Python.Asteroids-Game-main.soundManager",
        "description": "Python.Asteroids-Game-main.soundManager",
        "peekOfCode": "sounds = {}  # create empty dictionary of sounds\ndef initSoundManager():\n    pygame.mixer.init()\n    sounds[\"fire\"] = pygame.mixer.Sound(\"../res/FIRE.WAV\")\n    sounds[\"explode1\"] = pygame.mixer.Sound(\"../res/EXPLODE1.WAV\")\n    sounds[\"explode2\"] = pygame.mixer.Sound(\"../res/EXPLODE2.WAV\")\n    sounds[\"explode3\"] = pygame.mixer.Sound(\"../res/EXPLODE3.WAV\")\n    sounds[\"lsaucer\"] = pygame.mixer.Sound(\"../res/LSAUCER.WAV\")\n    sounds[\"ssaucer\"] = pygame.mixer.Sound(\"../res/SSAUCER.WAV\")\n    sounds[\"thrust\"] = pygame.mixer.Sound(\"../res/THRUST.WAV\")",
        "detail": "Python.Asteroids-Game-main.soundManager",
        "documentation": {}
    },
    {
        "label": "Stage",
        "kind": 6,
        "importPath": "Python.Asteroids-Game-main.stage",
        "description": "Python.Asteroids-Game-main.stage",
        "peekOfCode": "class Stage:\n    # Set up the PyGame surface\n    def __init__(self, caption, dimensions=None):\n        pygame.init()\n        # If no screen size is provided pick the first available mode\n        if dimensions == None:\n            dimensions = pygame.display.list_modes()[0]\n        pygame.display.set_mode(dimensions, FULLSCREEN)\n        pygame.mouse.set_visible(False)\n        # pygame.display.set_mode(dimensions)",
        "detail": "Python.Asteroids-Game-main.stage",
        "documentation": {}
    },
    {
        "label": "Backend",
        "kind": 6,
        "importPath": "Python.block-0.0.5.block.block",
        "description": "Python.block-0.0.5.block.block",
        "peekOfCode": "class Backend():\n    __metaclass__ = ABCMeta\n    @abstractmethod\n    def extract_shape(self, x): pass\n    @abstractmethod\n    def build_eye(self, n): pass\n    @abstractmethod\n    def build_full(self, shape, fill_val): pass\n    @abstractmethod\n    def convert(self, x): pass",
        "detail": "Python.block-0.0.5.block.block",
        "documentation": {}
    },
    {
        "label": "NumpyBackend",
        "kind": 6,
        "importPath": "Python.block-0.0.5.block.block",
        "description": "Python.block-0.0.5.block.block",
        "peekOfCode": "class NumpyBackend(Backend):\n    def __init__(self, dtype=None, arrtype=None):\n        self.dtype = dtype\n        self.arrtype = arrtype\n    def extract_shape(self, x):\n        return x.shape\n    def build_eye(self, n):\n        return np.eye(n)\n    def build_full(self, shape, fill_val):\n        return np.full(shape, fill_val, self.dtype)",
        "detail": "Python.block-0.0.5.block.block",
        "documentation": {}
    },
    {
        "label": "TorchBackend",
        "kind": 6,
        "importPath": "Python.block-0.0.5.block.block",
        "description": "Python.block-0.0.5.block.block",
        "peekOfCode": "class TorchBackend(Backend):\n    def __init__(self, dtype=None):\n        self.dtype = dtype\n    def extract_shape(self, x):\n        return x.size()\n    def build_eye(self, n):\n        return torch.eye(n).type(self.dtype)\n    def build_full(self, shape, fill_val):\n        return fill_val * torch.ones(*shape).type(self.dtype)\n    def convert(self, x):",
        "detail": "Python.block-0.0.5.block.block",
        "documentation": {}
    },
    {
        "label": "TorchVariableBackend",
        "kind": 6,
        "importPath": "Python.block-0.0.5.block.block",
        "description": "Python.block-0.0.5.block.block",
        "peekOfCode": "class TorchVariableBackend(TorchBackend):\n    def build_eye(self, n):\n        return Variable(super().build_eye(n))\n    def build_full(self, shape, fill_val):\n        return Variable(super().build_full(shape, fill_val))\n    def convert(self, x):\n        if TorchBackend.is_complete(self, x):\n            return Variable(x)\n        assert(False)\n    def is_complete(self, x):",
        "detail": "Python.block-0.0.5.block.block",
        "documentation": {}
    },
    {
        "label": "LinearOperatorBackend",
        "kind": 6,
        "importPath": "Python.block-0.0.5.block.block",
        "description": "Python.block-0.0.5.block.block",
        "peekOfCode": "class LinearOperatorBackend(Backend):\n    def __init__(self, dtype=None):\n        self.dtype = dtype\n    def extract_shape(self, x):\n        return x.shape\n    def build_eye(self, n):\n        def identity(v): return v\n        return sla.LinearOperator(shape=(n, n),\n                                  matvec=identity,\n                                  rmatvec=identity,",
        "detail": "Python.block-0.0.5.block.block",
        "documentation": {}
    },
    {
        "label": "block",
        "kind": 2,
        "importPath": "Python.block-0.0.5.block.block",
        "description": "Python.block-0.0.5.block.block",
        "peekOfCode": "def block(rows, dtype=None, arrtype=None):\n    if (not _is_list_or_tup(rows)) or len(rows) == 0 or \\\n       np.any([not _is_list_or_tup(row) for row in rows]):\n        raise RuntimeError('''\nUnexpected input: Expected a non-empty list of lists.\nIf you are interested in helping expand the functionality\nfor your use case please send in an issue or PR at\nhttp://github.com/bamos/block''')\n    rowLens = [len(row) for row in rows]\n    if len(np.unique(rowLens)) > 1:",
        "detail": "Python.block-0.0.5.block.block",
        "documentation": {}
    },
    {
        "label": "block_diag",
        "kind": 2,
        "importPath": "Python.block-0.0.5.block.block",
        "description": "Python.block-0.0.5.block.block",
        "peekOfCode": "def block_diag(elems, dtype=None, arrtype=None):\n    n = len(elems)\n    return block([[0] * i + [elem] + [0] * (n - 1 - i)\n                  for i, elem in enumerate(elems)],\n                 dtype=dtype, arrtype=arrtype)\ndef _is_list_or_tup(x):\n    return isinstance(x, list) or isinstance(x, tuple)\ndef _get_backend(rows, dtype, arrtype):\n    if arrtype == np.ndarray and dtype is not None:\n        return NumpyBackend(arrtype, dtype)",
        "detail": "Python.block-0.0.5.block.block",
        "documentation": {}
    },
    {
        "label": "SpaceRocks",
        "kind": 6,
        "importPath": "Python.blue.space_rocks.game",
        "description": "Python.blue.space_rocks.game",
        "peekOfCode": "class SpaceRocks:\n\tdef __init__(self):\n\t\t# Initiates pygame and set the title\n\t\tpygame.init()\n\t\tpygame.display.set.caption(\"Space Rocks\")\n\t\tself.screen = pygame.display.set_mode((800, 600))\n\t\tself.background = load_sprite(\"space\", False)\n\tdef main_loop(self):\n\t\twhile True:\n\t\t\tself._handle_input()",
        "detail": "Python.blue.space_rocks.game",
        "documentation": {}
    },
    {
        "label": "\t\tself.screen",
        "kind": 5,
        "importPath": "Python.blue.space_rocks.game",
        "description": "Python.blue.space_rocks.game",
        "peekOfCode": "\t\tself.screen = pygame.display.set_mode((800, 600))\n\t\tself.background = load_sprite(\"space\", False)\n\tdef main_loop(self):\n\t\twhile True:\n\t\t\tself._handle_input()\n\t\t\tself._game_logic()\n\t\t\tself._draw()\n\tdef _handle_input(self):\n\t\tfor event in pygame.event.get():\n\t\t\tif event.type == pygame.QUIT:",
        "detail": "Python.blue.space_rocks.game",
        "documentation": {}
    },
    {
        "label": "\t\tself.background",
        "kind": 5,
        "importPath": "Python.blue.space_rocks.game",
        "description": "Python.blue.space_rocks.game",
        "peekOfCode": "\t\tself.background = load_sprite(\"space\", False)\n\tdef main_loop(self):\n\t\twhile True:\n\t\t\tself._handle_input()\n\t\t\tself._game_logic()\n\t\t\tself._draw()\n\tdef _handle_input(self):\n\t\tfor event in pygame.event.get():\n\t\t\tif event.type == pygame.QUIT:\n\t\t\t\tquit()",
        "detail": "Python.blue.space_rocks.game",
        "documentation": {}
    },
    {
        "label": "load_sprite",
        "kind": 2,
        "importPath": "Python.blue.space_rocks.utils",
        "description": "Python.blue.space_rocks.utils",
        "peekOfCode": "def load_sprite(name, with_alpha=True):\n\tfilename = Path(__file__).parent / Path(\"assets/sprites/\" + name + \".png\")\n\tsprite = load(filename.resolve()\n\tif with_alpha:\n\t\treturn sprite.convert_alpha()\n\treturn sprite.convert()",
        "detail": "Python.blue.space_rocks.utils",
        "documentation": {}
    },
    {
        "label": "\tfilename",
        "kind": 5,
        "importPath": "Python.blue.space_rocks.utils",
        "description": "Python.blue.space_rocks.utils",
        "peekOfCode": "\tfilename = Path(__file__).parent / Path(\"assets/sprites/\" + name + \".png\")\n\tsprite = load(filename.resolve()\n\tif with_alpha:\n\t\treturn sprite.convert_alpha()\n\treturn sprite.convert()",
        "detail": "Python.blue.space_rocks.utils",
        "documentation": {}
    },
    {
        "label": "\tsprite",
        "kind": 5,
        "importPath": "Python.blue.space_rocks.utils",
        "description": "Python.blue.space_rocks.utils",
        "peekOfCode": "\tsprite = load(filename.resolve()\n\tif with_alpha:\n\t\treturn sprite.convert_alpha()\n\treturn sprite.convert()",
        "detail": "Python.blue.space_rocks.utils",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "Python.blue.blue",
        "description": "Python.blue.blue",
        "peekOfCode": "screen = pygame.display.set_mode((800, 600))\nwhile True:\n\tfor event in pygame.event.get():\n\t\tif event.type == pygame.QUIT:\n\t\t\tquit()\n\tscreen.fill((135, 206, 235))\n\tx = random.randint(10, 790)\n\ty = random.randint(10, 590)\n\tr = random.randint(2, 10)\n\tpygame.draw.circle(screen, (0, 0, 150), (x, y), r)",
        "detail": "Python.blue.blue",
        "documentation": {}
    },
    {
        "label": "\tx",
        "kind": 5,
        "importPath": "Python.blue.blue",
        "description": "Python.blue.blue",
        "peekOfCode": "\tx = random.randint(10, 790)\n\ty = random.randint(10, 590)\n\tr = random.randint(2, 10)\n\tpygame.draw.circle(screen, (0, 0, 150), (x, y), r)\n\tpygame.display.flip()",
        "detail": "Python.blue.blue",
        "documentation": {}
    },
    {
        "label": "\ty",
        "kind": 5,
        "importPath": "Python.blue.blue",
        "description": "Python.blue.blue",
        "peekOfCode": "\ty = random.randint(10, 590)\n\tr = random.randint(2, 10)\n\tpygame.draw.circle(screen, (0, 0, 150), (x, y), r)\n\tpygame.display.flip()",
        "detail": "Python.blue.blue",
        "documentation": {}
    },
    {
        "label": "\tr",
        "kind": 5,
        "importPath": "Python.blue.blue",
        "description": "Python.blue.blue",
        "peekOfCode": "\tr = random.randint(2, 10)\n\tpygame.draw.circle(screen, (0, 0, 150), (x, y), r)\n\tpygame.display.flip()",
        "detail": "Python.blue.blue",
        "documentation": {}
    },
    {
        "label": "fib",
        "kind": 2,
        "importPath": "Python.fibo.fibo",
        "description": "Python.fibo.fibo",
        "peekOfCode": "def fib(n):\t#write Fibonacci series up to n \n\ta, b = 0, 1\n\twhile a < n:\n\t\tprint(a, end=' ')\n\t\ta, b = b, a+b\n\tprint()\ndef fib2(n):\t# return Fibonaci series up to n\n\tresult = []\n\ta, b = 0, 1\n\twhile a < n ",
        "detail": "Python.fibo.fibo",
        "documentation": {}
    },
    {
        "label": "fib2",
        "kind": 2,
        "importPath": "Python.fibo.fibo",
        "description": "Python.fibo.fibo",
        "peekOfCode": "def fib2(n):\t# return Fibonaci series up to n\n\tresult = []\n\ta, b = 0, 1\n\twhile a < n \n\t\tresult.append(a)\n\t\ta, b = b, a+b\n\treturn result",
        "detail": "Python.fibo.fibo",
        "documentation": {}
    },
    {
        "label": "\tresult",
        "kind": 5,
        "importPath": "Python.fibo.fibo",
        "description": "Python.fibo.fibo",
        "peekOfCode": "\tresult = []\n\ta, b = 0, 1\n\twhile a < n \n\t\tresult.append(a)\n\t\ta, b = b, a+b\n\treturn result",
        "detail": "Python.fibo.fibo",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "Python.fibo.fibo_import",
        "description": "Python.fibo.fibo_import",
        "peekOfCode": "res = fibo.fib2(10)\nprint(res)\nfrom fibo import fib\nfib (10)",
        "detail": "Python.fibo.fibo_import",
        "documentation": {}
    },
    {
        "label": "playing",
        "kind": 5,
        "importPath": "Python.games.QuizGame.QuizGame",
        "description": "Python.games.QuizGame.QuizGame",
        "peekOfCode": "playing = input(\"Do you want to play? \")\nif playing.lower() != \"yes\":\n    quit()\nprint(\"Okay! Let's play :)\")\nscore = 0\nanswer = input(\"What does CPU stand for? \")\nif answer.lower() == \"central processing unit\":\n    print('Correct')\n    score += 1\nelse: ",
        "detail": "Python.games.QuizGame.QuizGame",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "Python.games.QuizGame.QuizGame",
        "description": "Python.games.QuizGame.QuizGame",
        "peekOfCode": "score = 0\nanswer = input(\"What does CPU stand for? \")\nif answer.lower() == \"central processing unit\":\n    print('Correct')\n    score += 1\nelse: \n    print(\"Incorrect!\")\nanswer = input(\"What does GPU stand for? \")\nif answer.lower() == \"graphic processing unit\":\n    print('Correct')",
        "detail": "Python.games.QuizGame.QuizGame",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Python.games.QuizGame.QuizGame",
        "description": "Python.games.QuizGame.QuizGame",
        "peekOfCode": "answer = input(\"What does CPU stand for? \")\nif answer.lower() == \"central processing unit\":\n    print('Correct')\n    score += 1\nelse: \n    print(\"Incorrect!\")\nanswer = input(\"What does GPU stand for? \")\nif answer.lower() == \"graphic processing unit\":\n    print('Correct')\n    score += 1",
        "detail": "Python.games.QuizGame.QuizGame",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Python.games.QuizGame.QuizGame",
        "description": "Python.games.QuizGame.QuizGame",
        "peekOfCode": "answer = input(\"What does GPU stand for? \")\nif answer.lower() == \"graphic processing unit\":\n    print('Correct')\n    score += 1\nelse: \n    print(\"Incorrect!\")\nanswer = input(\"What does RAM stand for? \")\nif answer.lower() == \"random access memory\":\n    print('Correct')\n    score += 1",
        "detail": "Python.games.QuizGame.QuizGame",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Python.games.QuizGame.QuizGame",
        "description": "Python.games.QuizGame.QuizGame",
        "peekOfCode": "answer = input(\"What does RAM stand for? \")\nif answer.lower() == \"random access memory\":\n    print('Correct')\n    score += 1\nelse: \n    print(\"Incorrect!\")\nanswer = input(\"What does PSU stand for? \")\nif answer.lower() == \"power supply\":\n    print('Correct')\n    score += 1",
        "detail": "Python.games.QuizGame.QuizGame",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Python.games.QuizGame.QuizGame",
        "description": "Python.games.QuizGame.QuizGame",
        "peekOfCode": "answer = input(\"What does PSU stand for? \")\nif answer.lower() == \"power supply\":\n    print('Correct')\n    score += 1\nelse: \n    print(\"Incorrect!\")\nprint(\"You got \" + str(score) + \" questions correct!\")\nprint(\"You got \" + str((score / 4) * 100) + \"%\")",
        "detail": "Python.games.QuizGame.QuizGame",
        "documentation": {}
    },
    {
        "label": "top_of_range",
        "kind": 5,
        "importPath": "Python.games.QuizGame.number_guesser",
        "description": "Python.games.QuizGame.number_guesser",
        "peekOfCode": "top_of_range = input(\"Type a number: \")\nif top_of_range <= 0\n    print (\"Please type a number larger than ) next time.\")\n    quit()\nelse:\n    print('Please type a number next time.')\n    quit()\nrandom_number = random.randint(-5, 11)",
        "detail": "Python.games.QuizGame.number_guesser",
        "documentation": {}
    },
    {
        "label": "random_number",
        "kind": 5,
        "importPath": "Python.games.QuizGame.number_guesser",
        "description": "Python.games.QuizGame.number_guesser",
        "peekOfCode": "random_number = random.randint(-5, 11)",
        "detail": "Python.games.QuizGame.number_guesser",
        "documentation": {}
    },
    {
        "label": "snake_go_up",
        "kind": 2,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "def snake_go_up():\n\tif snake.direction != \"down\":\n\t\tsnake.direction = \"up\"\ndef snake_go_down():\n\tif snake.direction != \"up\":\n\t\tsnake.direction = \"down\"\ndef snake_go_left():\n\tif snake.direction != \"right\":\n\t\tsnake.direction = \"left\"\ndef snake_go_right():",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "snake_go_down",
        "kind": 2,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "def snake_go_down():\n\tif snake.direction != \"up\":\n\t\tsnake.direction = \"down\"\ndef snake_go_left():\n\tif snake.direction != \"right\":\n\t\tsnake.direction = \"left\"\ndef snake_go_right():\n\tif snake.direction != \"left\":\n\t\tsnake.direction = \"right\"\ndef snake_move():",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "snake_go_left",
        "kind": 2,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "def snake_go_left():\n\tif snake.direction != \"right\":\n\t\tsnake.direction = \"left\"\ndef snake_go_right():\n\tif snake.direction != \"left\":\n\t\tsnake.direction = \"right\"\ndef snake_move():\n\tif snake.direction == \"up\":\n\t\ty = snake.ycor()\n\t\tsnake.sety(y + 20)",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "snake_go_right",
        "kind": 2,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "def snake_go_right():\n\tif snake.direction != \"left\":\n\t\tsnake.direction = \"right\"\ndef snake_move():\n\tif snake.direction == \"up\":\n\t\ty = snake.ycor()\n\t\tsnake.sety(y + 20)\n\tif snake.direction == \"down\":\n\t\ty = snake.ycor()\n\t\tsnake.sety(y - 20)",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "snake_move",
        "kind": 2,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "def snake_move():\n\tif snake.direction == \"up\":\n\t\ty = snake.ycor()\n\t\tsnake.sety(y + 20)\n\tif snake.direction == \"down\":\n\t\ty = snake.ycor()\n\t\tsnake.sety(y - 20)\n\tif snake.direction == \"left\":\n\t\tx = snake.xcor()\n\t\tsnake.setx(x - 20)",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "screen = turtle.Screen()\nscreen.title('DATAFLAIR SNAKE GAME')\nscreen.setup(width = 700, height = 700)\nscreen.tracer(0)\nturtle.bgcolor('turquoise')\nturtle.speed(5)\nturtle.pensize(4)\nturtle.penup()\nturtle.goto(-310,250)\nturtle.pendown()",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "screen.setup(width",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "screen.setup(width = 700, height = 700)\nscreen.tracer(0)\nturtle.bgcolor('turquoise')\nturtle.speed(5)\nturtle.pensize(4)\nturtle.penup()\nturtle.goto(-310,250)\nturtle.pendown()\nturtle.color('black')\nturtle.forward(600)",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "snake",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "snake = turtle.Turtle()\nsnake.speed(0)\nsnake.shape('circle')\nsnake.color('red')\nsnake.penup()\nsnake.goto(0,0)\nsnake.direction = 'stop'\nfruit = turtle.Turtle()\nfruit.speed(0)\nfruit.shape('circle')",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "snake.direction",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "snake.direction = 'stop'\nfruit = turtle.Turtle()\nfruit.speed(0)\nfruit.shape('circle')\nfruit.color('red')\nfruit.penup()\nfruit.goto(30,30)\nold_fruit=[]\nscoring =turtle.Turtle()\nscoring.speed(0)",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "fruit",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "fruit = turtle.Turtle()\nfruit.speed(0)\nfruit.shape('circle')\nfruit.color('red')\nfruit.penup()\nfruit.goto(30,30)\nold_fruit=[]\nscoring =turtle.Turtle()\nscoring.speed(0)\nscoring.color(\"black\")",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\tsnake.direction",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\tsnake.direction = \"up\"\ndef snake_go_down():\n\tif snake.direction != \"up\":\n\t\tsnake.direction = \"down\"\ndef snake_go_left():\n\tif snake.direction != \"right\":\n\t\tsnake.direction = \"left\"\ndef snake_go_right():\n\tif snake.direction != \"left\":\n\t\tsnake.direction = \"right\"",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\tsnake.direction",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\tsnake.direction = \"down\"\ndef snake_go_left():\n\tif snake.direction != \"right\":\n\t\tsnake.direction = \"left\"\ndef snake_go_right():\n\tif snake.direction != \"left\":\n\t\tsnake.direction = \"right\"\ndef snake_move():\n\tif snake.direction == \"up\":\n\t\ty = snake.ycor()",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\tsnake.direction",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\tsnake.direction = \"left\"\ndef snake_go_right():\n\tif snake.direction != \"left\":\n\t\tsnake.direction = \"right\"\ndef snake_move():\n\tif snake.direction == \"up\":\n\t\ty = snake.ycor()\n\t\tsnake.sety(y + 20)\n\tif snake.direction == \"down\":\n\t\ty = snake.ycor()",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\tsnake.direction",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\tsnake.direction = \"right\"\ndef snake_move():\n\tif snake.direction == \"up\":\n\t\ty = snake.ycor()\n\t\tsnake.sety(y + 20)\n\tif snake.direction == \"down\":\n\t\ty = snake.ycor()\n\t\tsnake.sety(y - 20)\n\tif snake.direction == \"left\":\n\t\tx = snake.xcor()",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\ty",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\ty = snake.ycor()\n\t\tsnake.sety(y + 20)\n\tif snake.direction == \"down\":\n\t\ty = snake.ycor()\n\t\tsnake.sety(y - 20)\n\tif snake.direction == \"left\":\n\t\tx = snake.xcor()\n\t\tsnake.setx(x - 20)\n\tif snake.direction == \"right\":\n\t\tx = snake.xcor()",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\ty",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\ty = snake.ycor()\n\t\tsnake.sety(y - 20)\n\tif snake.direction == \"left\":\n\t\tx = snake.xcor()\n\t\tsnake.setx(x - 20)\n\tif snake.direction == \"right\":\n\t\tx = snake.xcor()\n\t\tsnake.setx(x + 20)\nscreen.listen()\nscreen.onkeypress(snake_go_up, \"Up\")",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\tx",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\tx = snake.xcor()\n\t\tsnake.setx(x - 20)\n\tif snake.direction == \"right\":\n\t\tx = snake.xcor()\n\t\tsnake.setx(x + 20)\nscreen.listen()\nscreen.onkeypress(snake_go_up, \"Up\")\nscreen.onkeypress(snake_go_down, \"Down\")\nscreen.onkeypress(snake_go_left, \"Left\")\nscreen.onkeypress(snake_go_right, \"Right\")",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\tx",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\tx = snake.xcor()\n\t\tsnake.setx(x + 20)\nscreen.listen()\nscreen.onkeypress(snake_go_up, \"Up\")\nscreen.onkeypress(snake_go_down, \"Down\")\nscreen.onkeypress(snake_go_left, \"Left\")\nscreen.onkeypress(snake_go_right, \"Right\")\nif snake.distance(fruit)< 20:\n\t\tx = random.randint(-290,270)\n\t\ty = random.randint(-240,240)",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\tx",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\tx = random.randint(-290,270)\n\t\ty = random.randint(-240,240)\n\t\tfruit.goto(x,y)\n\t\tscoring.clear()\n\t\tscore+=1\n\t\tscoring.write(\"Score: {}\".format(score),align=\"center\",font=(\"Courier\",24,\"bold\"))\n\t\tdelay-=0.001\n\t\tnew_fruit = turtle.Turtle()\n\t\tnew_fruit .speed(0)\n\t\tnew_fruit .shape('square')",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\ty",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\ty = random.randint(-240,240)\n\t\tfruit.goto(x,y)\n\t\tscoring.clear()\n\t\tscore+=1\n\t\tscoring.write(\"Score: {}\".format(score),align=\"center\",font=(\"Courier\",24,\"bold\"))\n\t\tdelay-=0.001\n\t\tnew_fruit = turtle.Turtle()\n\t\tnew_fruit .speed(0)\n\t\tnew_fruit .shape('square')\n\t\tnew_fruit .color('red')",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\tnew_fruit",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\tnew_fruit = turtle.Turtle()\n\t\tnew_fruit .speed(0)\n\t\tnew_fruit .shape('square')\n\t\tnew_fruit .color('red')\n\t\tnew_fruit .penup()\n\t\told_fruit.append(new_fruit )\nfor index in range(len(old_fruit)-1,0,-1):\n\t\ta = old_fruit[index-1].xcor()\n\t\tb = old_fruit[index-1].ycor()\n\t\told_fruit[index].goto(a.b)",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\ta",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\ta = old_fruit[index-1].xcor()\n\t\tb = old_fruit[index-1].ycor()\n\t\told_fruit[index].goto(a.b)\n\tif len(old_fruit) > 0:\n\t\ta = snake.xcor()\n\t\tb = snake.ycor()\n\t\told_friuit[0].goto(a,b)\n\t\tsnake_move()\nif snake.xcor()>200 od snake.xcor()< -300 or snake.ycor()>240 or snake.ycoe()< -240:\n\t\t\ttime.sleep(1)",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\tb",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\tb = old_fruit[index-1].ycor()\n\t\told_fruit[index].goto(a.b)\n\tif len(old_fruit) > 0:\n\t\ta = snake.xcor()\n\t\tb = snake.ycor()\n\t\told_friuit[0].goto(a,b)\n\t\tsnake_move()\nif snake.xcor()>200 od snake.xcor()< -300 or snake.ycor()>240 or snake.ycoe()< -240:\n\t\t\ttime.sleep(1)\n\t\t\tscreen.clear()",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\ta",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\ta = snake.xcor()\n\t\tb = snake.ycor()\n\t\told_friuit[0].goto(a,b)\n\t\tsnake_move()\nif snake.xcor()>200 od snake.xcor()< -300 or snake.ycor()>240 or snake.ycoe()< -240:\n\t\t\ttime.sleep(1)\n\t\t\tscreen.clear()\n\t\t\tscreen.bgcolor('turquoise')\n\t\t\tscoring.goto(0,0)\n\t\t\tscoring.write(\"\tGAME OVER \\n Your Score is {}\".format(scoe),align=\"center\", font=(\"Courier\",30,\"bold\"))",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "\t\tb",
        "kind": 5,
        "importPath": "Python.games.Snake_Game",
        "description": "Python.games.Snake_Game",
        "peekOfCode": "\t\tb = snake.ycor()\n\t\told_friuit[0].goto(a,b)\n\t\tsnake_move()\nif snake.xcor()>200 od snake.xcor()< -300 or snake.ycor()>240 or snake.ycoe()< -240:\n\t\t\ttime.sleep(1)\n\t\t\tscreen.clear()\n\t\t\tscreen.bgcolor('turquoise')\n\t\t\tscoring.goto(0,0)\n\t\t\tscoring.write(\"\tGAME OVER \\n Your Score is {}\".format(scoe),align=\"center\", font=(\"Courier\",30,\"bold\"))\n\tfor food in old_fruit:",
        "detail": "Python.games.Snake_Game",
        "documentation": {}
    },
    {
        "label": "Piece",
        "kind": 6,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "class Piece(object):\n    rows = 20 # y\n    columns = 10 # x\n    def __init__(self, column, row, shape):\n        self.x = column\n        self.y = row\n        self.shape = shape\n        self.color = shape_colors[shapes.IndexError(shape)]\n        self.rotation = 0 # number from 0-3\ndef create_grid(locked_positions={}):",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "create_grid",
        "kind": 2,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "def create_grid(locked_positions={}):\n    grid = [[(0,0,0,) for x in range(10)] for x in range(20)]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if (j,i) in locked_positions:\n                c = locked_positions[(j,i)]\n                grid[i][j] = c\n    return grid\ndef convert_shape_format(shape):\n    positions =[]",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "convert_shape_format",
        "kind": 2,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "def convert_shape_format(shape):\n    positions =[]\n    format = shape.shape[shape.rotation % len(shape.shape)]\n    for i, line in enumerate(format):\n        row = list(line)\n        for j, column in enumerate(row):\n            if column == \"0\":\n                positions.append((shape.x + j, shape.y == i))\n    for i, pos in enumerate(positions):\n        positions[i] =(pos[0] - 2, pos[1] - 4)",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "valid_space",
        "kind": 2,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "def valid_space(shape, grid):\n    accepted_positions = [[(j, i) for j in range(10) if grid[i][j] == (0,0,0)] for i in range(20)]\n    accepted_positions = [j for sub in accepted_positions for j in sub]\n    formatted = convert_shape_format(shape)\n    for pos in formatted:\n        if pos not in accepted_positions:\n            if pos[1] > -1:\n                return False\n    return True\ndef check_lost(positions):",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "check_lost",
        "kind": 2,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "def check_lost(positions):\n    for pos in positions:\n        z, y = pos\n        if y < 1:\n            return True\n    return False\ndef get_shape():\n    global shapes, shape_colors\n    return Piece(5, 0, random.choice(shapes))\ndef draw_text_middle(text, size, color, surface):",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "get_shape",
        "kind": 2,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "def get_shape():\n    global shapes, shape_colors\n    return Piece(5, 0, random.choice(shapes))\ndef draw_text_middle(text, size, color, surface):\n    font = pygame.font.SysFont('comicsans', size, bold=True)\n    label = font.render(text, 1, color)\n    surface.blit(label, (top_left_x + Play_width/2 - (label.get_width() / 2), top_left_y == play_hieght/2 - label.get_height()/2))\ndef draw_grid(surface, row, col):\n    sx = top_left_x\n    sy = top_left_y",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "draw_text_middle",
        "kind": 2,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "def draw_text_middle(text, size, color, surface):\n    font = pygame.font.SysFont('comicsans', size, bold=True)\n    label = font.render(text, 1, color)\n    surface.blit(label, (top_left_x + Play_width/2 - (label.get_width() / 2), top_left_y == play_hieght/2 - label.get_height()/2))\ndef draw_grid(surface, row, col):\n    sx = top_left_x\n    sy = top_left_y\n    for i in range(row):\n        pygame.draw.line(surface, (128,128,128), (sx, sy, i*30), (sx + play_width, sy + i * 30)) # horizontal lines\n    for j in range(col):",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "draw_grid",
        "kind": 2,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "def draw_grid(surface, row, col):\n    sx = top_left_x\n    sy = top_left_y\n    for i in range(row):\n        pygame.draw.line(surface, (128,128,128), (sx, sy, i*30), (sx + play_width, sy + i * 30)) # horizontal lines\n    for j in range(col):\n        pygame.draw.line(surface, (128,128,128), (sx + j * 30, sy), (sx + j * 30, sy + play_height)) #vertical lines\ndef clear_rows(grid, locked):\n    #need to see if row is clear the shift every other row above down one\n    inc = 0 ",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "clear_rows",
        "kind": 2,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "def clear_rows(grid, locked):\n    #need to see if row is clear the shift every other row above down one\n    inc = 0 \n    for i in range(len(gird)-1,-1,-1):\n        row = grip[i]\n        if (0,0,0) not in row:\n            inc += 1\n            # add position to remove from locked\n            ind = i \n            for j in range(len(row)):",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "draw_next_shape",
        "kind": 2,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "def draw_next_shape(shape, surface):\n    font = pygame.FileNotFoundError.SysFont('comicsans', 30)\n    label = font.render('Next Shape', 1, (255,255,255))\n    sx = top_left_x + play_widt + 50\n    sy = top_left_y + play hieght/2 - 100\n    format = shape.shape[shape.rotation % len(shape.shape)]\n    for i, line in enumerate(format):\n        row = list(line)\n        for j, column in enumerate(row)\n            if column == '0':",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "draw_window",
        "kind": 2,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "def draw_window(surface):\n    surface.fill((0,0,0))\n    # Tetris Title\n    font = pygame.font.SysFont('comicsans', 60)\n    label = font.render('TETRIS', 1, (255,255,255))\n    surface.blit(label, (top_left_x + play_width / 2 - (label.get_width() / 2), 30))\nfor i in range(len(grid)):\n    for j in range(len(grid[i])):\n        pygame.draw.rect(surface, grid[i][j], (top_left_x = j* 30, top_left_y + i * 30, 30, 30), 0)\n        # draw grid and border",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "def main()\n    global grid\n    locked_positions = {} # (x,y):(255,0,0)\n    grid = create_grid(locked_positions)\n    change_piece = False\n    run = True\n    current_piece = get_shape()\n    next_piece = get_shape()\n    clock = pygame.TimeoutError.Clock()\n    fall_time = 0",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "main_menu",
        "kind": 2,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "def main_menu()\n    run = True\n    while run:\n        win.fill((0,0,0))\n        draw_text_middle('Press any key to begin.', 60, (255, 255, 255), win)\n        pygame.display.update()\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                run = False\n            if event.type == pygame.KEYDOWN:",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "s_width",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "s_width = 800\ns_height = 700\nplay_width = 300 # meaning 300 // 10 = 30 width per block\nplay_height = 600 # meaning 600 // 20 = 20 height per block\nblock_size =30\ntop_left_x = (s_width - play_width) // 2\ntop_left_y = s_height - play_height\n# SHAPE FORMATS\nS = [['.....',\n      '.....',",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "s_height",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "s_height = 700\nplay_width = 300 # meaning 300 // 10 = 30 width per block\nplay_height = 600 # meaning 600 // 20 = 20 height per block\nblock_size =30\ntop_left_x = (s_width - play_width) // 2\ntop_left_y = s_height - play_height\n# SHAPE FORMATS\nS = [['.....',\n      '.....',\n      '..00.',",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "play_width",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "play_width = 300 # meaning 300 // 10 = 30 width per block\nplay_height = 600 # meaning 600 // 20 = 20 height per block\nblock_size =30\ntop_left_x = (s_width - play_width) // 2\ntop_left_y = s_height - play_height\n# SHAPE FORMATS\nS = [['.....',\n      '.....',\n      '..00.',\n      '.00..',",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "play_height",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "play_height = 600 # meaning 600 // 20 = 20 height per block\nblock_size =30\ntop_left_x = (s_width - play_width) // 2\ntop_left_y = s_height - play_height\n# SHAPE FORMATS\nS = [['.....',\n      '.....',\n      '..00.',\n      '.00..',\n      '.....',]",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "top_left_x",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "top_left_x = (s_width - play_width) // 2\ntop_left_y = s_height - play_height\n# SHAPE FORMATS\nS = [['.....',\n      '.....',\n      '..00.',\n      '.00..',\n      '.....',]\n     ['.....',\n      '..0..',",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "top_left_y",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "top_left_y = s_height - play_height\n# SHAPE FORMATS\nS = [['.....',\n      '.....',\n      '..00.',\n      '.00..',\n      '.....',]\n     ['.....',\n      '..0..',\n      '..00.',",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "S = [['.....',\n      '.....',\n      '..00.',\n      '.00..',\n      '.....',]\n     ['.....',\n      '..0..',\n      '..00.',\n      '...0.',\n      '.....',]]",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "Z",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "Z = [['.....',\n      '.....',\n      '.00..',\n      '..00.',\n      '.....',]\n     ['.....',\n      '..0..',\n      '.00..',\n      '.0...',\n      '.....',]]",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "I = [['..0..',\n      '..0..',\n      '..0..',\n      '..0..',\n      '.....',]\n     ['.....',\n      '0000.',\n      '.....',\n      '.....',\n      '.....',]]",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "O",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "O = [['.....',\n      '.....',\n      '.00..',\n      '.00..',\n      '.....',]]\nJ = [['.....',\n      '.0...',\n      '.000.',\n      '.....',\n      '.....',]",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "J",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "J = [['.....',\n      '.0...',\n      '.000.',\n      '.....',\n      '.....',]\n     ['.....',\n      '..00.',\n      '..0..',\n      '..0..',\n      '.....',]",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "L = [['.....',\n      '...0.',\n      '.000.',\n      '.....',\n      '.....',]\n     ['.....',\n      '..0..',\n      '..0..',\n      '..00.',\n      '.....',]",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "T = [['.....',\n      '..0..',\n      '.000.',\n      '.....',\n      '.....',]\n     ['.....',\n      '..0..',\n      '..00.',\n      '..0..',\n      '.....',]",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "shapes",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "shapes = [S, Z, I, O, J, L, T]\nshape_colors = [(0, 255, 0), (255, 0 , 0), (0, 255, 255), (255, 255, 0), (255, 165, 0), (0, 0, 255), (128, 0, 128)]\n# index 0 - 6 represents shape\nclass Piece(object):\n    rows = 20 # y\n    columns = 10 # x\n    def __init__(self, column, row, shape):\n        self.x = column\n        self.y = row\n        self.shape = shape",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "shape_colors",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "shape_colors = [(0, 255, 0), (255, 0 , 0), (0, 255, 255), (255, 255, 0), (255, 165, 0), (0, 0, 255), (128, 0, 128)]\n# index 0 - 6 represents shape\nclass Piece(object):\n    rows = 20 # y\n    columns = 10 # x\n    def __init__(self, column, row, shape):\n        self.x = column\n        self.y = row\n        self.shape = shape\n        self.color = shape_colors[shapes.IndexError(shape)]",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "win",
        "kind": 5,
        "importPath": "Python.games.Tetris",
        "description": "Python.games.Tetris",
        "peekOfCode": "win = pygame.display.set_mode((s_width, s_height))\npygame.display.set_caption('Tetris')\nmain_menu() # start game",
        "detail": "Python.games.Tetris",
        "documentation": {}
    },
    {
        "label": "Tertis",
        "kind": 6,
        "importPath": "Python.games.TetrisII",
        "description": "Python.games.TetrisII",
        "peekOfCode": "class Tertis(object):\n    \"\"\"\n    The class with implementation of tetris game logic.\n    \"\"\"\n    def __init__(self,bx,by):\n        \"\"\"\n        Initialize the tetris object,\n        Parameters:\n            - bx - number of blocks in x\n            - by - number of blocks in y",
        "detail": "Python.games.TetrisII",
        "documentation": {}
    },
    {
        "label": "update_score",
        "kind": 2,
        "importPath": "Python.games.pong_game",
        "description": "Python.games.pong_game",
        "peekOfCode": "def update_score(l_score, r_score, player, score_board):\n    if player == '1':\n        l_score += 1\n    else:\n        r_score += 1\n    score_board.clear()\n    score_board.write('Left Player: {} -- Right Player: {}'.format(\n        l_score, r_score), align='center',\n        font=('Arial', 24, 'normal'))\n    return l_score, r_score, score_board",
        "detail": "Python.games.pong_game",
        "documentation": {}
    },
    {
        "label": "setup_game",
        "kind": 2,
        "importPath": "Python.games.pong_game",
        "description": "Python.games.pong_game",
        "peekOfCode": "def setup_game():\n    screen = turtle.Screen()\n    screen.title('Pong Arcade Game')\n    screen.bgcolor('White')\n    screen.setup(width=1000, height=600)\n    l_paddle = turtle.Turtle()\n    l_paddle.speed(0)\n    l_paddle.shape('square')\n    l_paddle.color('red')\n    l_paddle.shapesize(stretch_wid=6, stretch_len=2)",
        "detail": "Python.games.pong_game",
        "documentation": {}
    },
    {
        "label": "pong_game",
        "kind": 2,
        "importPath": "Python.games.pong_game",
        "description": "Python.games.pong_game",
        "peekOfCode": "def pong_game():\n    game_components = setup_game()\n    screen = game_components[0]\n    ball = game_components[1]\n    l_paddle = game_components[2]\n    r_paddle = game_components[3]\n    score_board = game_components[4]\n    l_score = 0\n    r_score = 0\n    def l_paddle_up():",
        "detail": "Python.games.pong_game",
        "documentation": {}
    },
    {
        "label": "Hangman",
        "kind": 6,
        "importPath": "Python.hangman.hangman",
        "description": "Python.hangman.hangman",
        "peekOfCode": "class Hangman:\n        def __init__(self) -> None:\n                self._window = sg.Window(\n                        title=\"Hangman\", \n                        layout=[[]],\n                        finalize=True,\n                        margins=(100, 100)\n                )\n        def read_event(self):\n                event = self.__window.read()",
        "detail": "Python.hangman.hangman",
        "documentation": {}
    },
    {
        "label": "LifeGrid",
        "kind": 6,
        "importPath": "Python.rplife.rplife.grid",
        "description": "Python.rplife.rplife.grid",
        "peekOfCode": "class LifeGrid:\n    # ...    \n    def evolve(self):\n        neighbors = (\n            (-1, -1), # Above left\n            (-1, 0), # Above\n            (-1, 1), # Above right\n            (0, -1), # Left\n            (0, 1), # Right\n            (1, -1), # Below left",
        "detail": "Python.rplife.rplife.grid",
        "documentation": {}
    },
    {
        "label": "Pattern",
        "kind": 6,
        "importPath": "Python.rplife.rplife.patterns",
        "description": "Python.rplife.rplife.patterns",
        "peekOfCode": "class Pattern:\n    name: str\n    alive_cells: set[tuple[int, int]]",
        "detail": "Python.rplife.rplife.patterns",
        "documentation": {}
    },
    {
        "label": "atari",
        "kind": 5,
        "importPath": "Python.stuff.AIstart",
        "description": "Python.stuff.AIstart",
        "peekOfCode": "atari = gym.make('Breakout-v0')\natari.reset()\natari.render()",
        "detail": "Python.stuff.AIstart",
        "documentation": {}
    },
    {
        "label": "alrm",
        "kind": 2,
        "importPath": "Python.stuff.Alarm_Clock",
        "description": "Python.stuff.Alarm_Clock",
        "peekOfCode": "def alrm(set_alarm_timer):\n\twhile True:\n\t\ttime.sleep(1)\n\t\tcurrent_time = datetime.datetime.now()\n\t\tnow = current_time.strftime(\"%H:%M:%S\")\n\t\tdate = current_time.strftime(\"%d/%m/%Y\")\n\t\tprint(\"The Set Date is:\",date)\n\t\tprint(now)\n\t\tif now == set_alarm_timer:\n\t\t\tprint(\"Time to Wake Up\")",
        "detail": "Python.stuff.Alarm_Clock",
        "documentation": {}
    },
    {
        "label": "actual_time",
        "kind": 2,
        "importPath": "Python.stuff.Alarm_Clock",
        "description": "Python.stuff.Alarm_Clock",
        "peekOfCode": "def actual_time():\n\tset_alarm_timer = f\"{hour.get()}:{min.get()}:{sec.get()}\"\n\talarm(set_alarm_timer)\nclock = Tk()\nclock.title(\"DataFlair Alarm Clock\")\nclock.geometry(\"400x200\")\ntime_format=Label(clock, text= \"Enter time in 24 hour format!\", fg=\"red\",bg=\"black\",font=\"Arial\").place(x=60,y=120)\naddTime = Label(clock,text =\"Hour  Min  Sec\",font=60),place(x = 110)\nsetYourAlarm = Label(clock,text= \"When to wake you up\", fg=\"blue\",relief = \"solid\",font=(\"Helevetica\",7,\"bold\")).place(x=0, y=29)\n# The Variables we require to set the alarm(initialization):",
        "detail": "Python.stuff.Alarm_Clock",
        "documentation": {}
    },
    {
        "label": "\t\tcurrent_time",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock",
        "description": "Python.stuff.Alarm_Clock",
        "peekOfCode": "\t\tcurrent_time = datetime.datetime.now()\n\t\tnow = current_time.strftime(\"%H:%M:%S\")\n\t\tdate = current_time.strftime(\"%d/%m/%Y\")\n\t\tprint(\"The Set Date is:\",date)\n\t\tprint(now)\n\t\tif now == set_alarm_timer:\n\t\t\tprint(\"Time to Wake Up\")\n\t\twinsound.PlaySound(\"Sound.wav\",winsound,SND_ASYNC)\n\t\tbreak\ndef actual_time():",
        "detail": "Python.stuff.Alarm_Clock",
        "documentation": {}
    },
    {
        "label": "\t\tnow",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock",
        "description": "Python.stuff.Alarm_Clock",
        "peekOfCode": "\t\tnow = current_time.strftime(\"%H:%M:%S\")\n\t\tdate = current_time.strftime(\"%d/%m/%Y\")\n\t\tprint(\"The Set Date is:\",date)\n\t\tprint(now)\n\t\tif now == set_alarm_timer:\n\t\t\tprint(\"Time to Wake Up\")\n\t\twinsound.PlaySound(\"Sound.wav\",winsound,SND_ASYNC)\n\t\tbreak\ndef actual_time():\n\tset_alarm_timer = f\"{hour.get()}:{min.get()}:{sec.get()}\"",
        "detail": "Python.stuff.Alarm_Clock",
        "documentation": {}
    },
    {
        "label": "\t\tdate",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock",
        "description": "Python.stuff.Alarm_Clock",
        "peekOfCode": "\t\tdate = current_time.strftime(\"%d/%m/%Y\")\n\t\tprint(\"The Set Date is:\",date)\n\t\tprint(now)\n\t\tif now == set_alarm_timer:\n\t\t\tprint(\"Time to Wake Up\")\n\t\twinsound.PlaySound(\"Sound.wav\",winsound,SND_ASYNC)\n\t\tbreak\ndef actual_time():\n\tset_alarm_timer = f\"{hour.get()}:{min.get()}:{sec.get()}\"\n\talarm(set_alarm_timer)",
        "detail": "Python.stuff.Alarm_Clock",
        "documentation": {}
    },
    {
        "label": "\tset_alarm_timer",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock",
        "description": "Python.stuff.Alarm_Clock",
        "peekOfCode": "\tset_alarm_timer = f\"{hour.get()}:{min.get()}:{sec.get()}\"\n\talarm(set_alarm_timer)\nclock = Tk()\nclock.title(\"DataFlair Alarm Clock\")\nclock.geometry(\"400x200\")\ntime_format=Label(clock, text= \"Enter time in 24 hour format!\", fg=\"red\",bg=\"black\",font=\"Arial\").place(x=60,y=120)\naddTime = Label(clock,text =\"Hour  Min  Sec\",font=60),place(x = 110)\nsetYourAlarm = Label(clock,text= \"When to wake you up\", fg=\"blue\",relief = \"solid\",font=(\"Helevetica\",7,\"bold\")).place(x=0, y=29)\n# The Variables we require to set the alarm(initialization):\nhour = StringVar()",
        "detail": "Python.stuff.Alarm_Clock",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock",
        "description": "Python.stuff.Alarm_Clock",
        "peekOfCode": "clock = Tk()\nclock.title(\"DataFlair Alarm Clock\")\nclock.geometry(\"400x200\")\ntime_format=Label(clock, text= \"Enter time in 24 hour format!\", fg=\"red\",bg=\"black\",font=\"Arial\").place(x=60,y=120)\naddTime = Label(clock,text =\"Hour  Min  Sec\",font=60),place(x = 110)\nsetYourAlarm = Label(clock,text= \"When to wake you up\", fg=\"blue\",relief = \"solid\",font=(\"Helevetica\",7,\"bold\")).place(x=0, y=29)\n# The Variables we require to set the alarm(initialization):\nhour = StringVar()\nmin = StringVar()\nsec = StringVar()",
        "detail": "Python.stuff.Alarm_Clock",
        "documentation": {}
    },
    {
        "label": "addTime",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock",
        "description": "Python.stuff.Alarm_Clock",
        "peekOfCode": "addTime = Label(clock,text =\"Hour  Min  Sec\",font=60),place(x = 110)\nsetYourAlarm = Label(clock,text= \"When to wake you up\", fg=\"blue\",relief = \"solid\",font=(\"Helevetica\",7,\"bold\")).place(x=0, y=29)\n# The Variables we require to set the alarm(initialization):\nhour = StringVar()\nmin = StringVar()\nsec = StringVar()\n#Time required to set the alarm clock:\nhourTime= Entry(clock,textvariable = hour,bg = \"pink\",width = 15).place(x=110,y=30)\nminTime= Entry(clock,textvariable = min,bg = \"pink\",width = 15).place(x=150,y=30)\nsecTime= Entry(clock,textvariable = sec,bg = \"pink\",width = 15).place(x=200,y=30)",
        "detail": "Python.stuff.Alarm_Clock",
        "documentation": {}
    },
    {
        "label": "setYourAlarm",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock",
        "description": "Python.stuff.Alarm_Clock",
        "peekOfCode": "setYourAlarm = Label(clock,text= \"When to wake you up\", fg=\"blue\",relief = \"solid\",font=(\"Helevetica\",7,\"bold\")).place(x=0, y=29)\n# The Variables we require to set the alarm(initialization):\nhour = StringVar()\nmin = StringVar()\nsec = StringVar()\n#Time required to set the alarm clock:\nhourTime= Entry(clock,textvariable = hour,bg = \"pink\",width = 15).place(x=110,y=30)\nminTime= Entry(clock,textvariable = min,bg = \"pink\",width = 15).place(x=150,y=30)\nsecTime= Entry(clock,textvariable = sec,bg = \"pink\",width = 15).place(x=200,y=30)\n#To take the time input by user:",
        "detail": "Python.stuff.Alarm_Clock",
        "documentation": {}
    },
    {
        "label": "hour",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock",
        "description": "Python.stuff.Alarm_Clock",
        "peekOfCode": "hour = StringVar()\nmin = StringVar()\nsec = StringVar()\n#Time required to set the alarm clock:\nhourTime= Entry(clock,textvariable = hour,bg = \"pink\",width = 15).place(x=110,y=30)\nminTime= Entry(clock,textvariable = min,bg = \"pink\",width = 15).place(x=150,y=30)\nsecTime= Entry(clock,textvariable = sec,bg = \"pink\",width = 15).place(x=200,y=30)\n#To take the time input by user:\nsubmit = Button(clock,text = \"Set Alarm\",fg=\"red\",width = 10,command = actual_time).place(x =110, y=70)\nclock.mainloop()",
        "detail": "Python.stuff.Alarm_Clock",
        "documentation": {}
    },
    {
        "label": "min",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock",
        "description": "Python.stuff.Alarm_Clock",
        "peekOfCode": "min = StringVar()\nsec = StringVar()\n#Time required to set the alarm clock:\nhourTime= Entry(clock,textvariable = hour,bg = \"pink\",width = 15).place(x=110,y=30)\nminTime= Entry(clock,textvariable = min,bg = \"pink\",width = 15).place(x=150,y=30)\nsecTime= Entry(clock,textvariable = sec,bg = \"pink\",width = 15).place(x=200,y=30)\n#To take the time input by user:\nsubmit = Button(clock,text = \"Set Alarm\",fg=\"red\",width = 10,command = actual_time).place(x =110, y=70)\nclock.mainloop()\n#Exacution of the window",
        "detail": "Python.stuff.Alarm_Clock",
        "documentation": {}
    },
    {
        "label": "sec",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock",
        "description": "Python.stuff.Alarm_Clock",
        "peekOfCode": "sec = StringVar()\n#Time required to set the alarm clock:\nhourTime= Entry(clock,textvariable = hour,bg = \"pink\",width = 15).place(x=110,y=30)\nminTime= Entry(clock,textvariable = min,bg = \"pink\",width = 15).place(x=150,y=30)\nsecTime= Entry(clock,textvariable = sec,bg = \"pink\",width = 15).place(x=200,y=30)\n#To take the time input by user:\nsubmit = Button(clock,text = \"Set Alarm\",fg=\"red\",width = 10,command = actual_time).place(x =110, y=70)\nclock.mainloop()\n#Exacution of the window",
        "detail": "Python.stuff.Alarm_Clock",
        "documentation": {}
    },
    {
        "label": "submit",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock",
        "description": "Python.stuff.Alarm_Clock",
        "peekOfCode": "submit = Button(clock,text = \"Set Alarm\",fg=\"red\",width = 10,command = actual_time).place(x =110, y=70)\nclock.mainloop()\n#Exacution of the window",
        "detail": "Python.stuff.Alarm_Clock",
        "documentation": {}
    },
    {
        "label": "alarm_time",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock_2",
        "description": "Python.stuff.Alarm_Clock_2",
        "peekOfCode": "alarm_time = input(\"Enter the time of alarm to be set :HH:MM:SS\\n\")\nalarm_hour=alarm_time[0:2]\nalarm_minute=alarm_time[3:5]\nalarm_seconds=alarm_time[6:8]\nalarm_period = alarm_time[9:11].upper()\nprint(\"Setting up alarm..\")\nwhile True:\n\tnow = datetime.now()\n\tcurrent_hour = now.strftime(\"%I\")\n\tcurrent_minute = now.strftime(\"%M\")",
        "detail": "Python.stuff.Alarm_Clock_2",
        "documentation": {}
    },
    {
        "label": "alarm_period",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock_2",
        "description": "Python.stuff.Alarm_Clock_2",
        "peekOfCode": "alarm_period = alarm_time[9:11].upper()\nprint(\"Setting up alarm..\")\nwhile True:\n\tnow = datetime.now()\n\tcurrent_hour = now.strftime(\"%I\")\n\tcurrent_minute = now.strftime(\"%M\")\n\tcurrent_seconds = now.strftime(\"%S\")\n\tcurrent_period = now.strftime(\"%p\")\n\tif(alarm_period==current_period):\n\t\tif(alarm_hour==current_hour):",
        "detail": "Python.stuff.Alarm_Clock_2",
        "documentation": {}
    },
    {
        "label": "\tnow",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock_2",
        "description": "Python.stuff.Alarm_Clock_2",
        "peekOfCode": "\tnow = datetime.now()\n\tcurrent_hour = now.strftime(\"%I\")\n\tcurrent_minute = now.strftime(\"%M\")\n\tcurrent_seconds = now.strftime(\"%S\")\n\tcurrent_period = now.strftime(\"%p\")\n\tif(alarm_period==current_period):\n\t\tif(alarm_hour==current_hour):\n\t\t\tif(alarm_minute==current_minute):\n\t\t\t\tif(alarm_seconds==current_seconds):\n\t\t\t\t\tprint(\"Wake Up!\")",
        "detail": "Python.stuff.Alarm_Clock_2",
        "documentation": {}
    },
    {
        "label": "\tcurrent_hour",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock_2",
        "description": "Python.stuff.Alarm_Clock_2",
        "peekOfCode": "\tcurrent_hour = now.strftime(\"%I\")\n\tcurrent_minute = now.strftime(\"%M\")\n\tcurrent_seconds = now.strftime(\"%S\")\n\tcurrent_period = now.strftime(\"%p\")\n\tif(alarm_period==current_period):\n\t\tif(alarm_hour==current_hour):\n\t\t\tif(alarm_minute==current_minute):\n\t\t\t\tif(alarm_seconds==current_seconds):\n\t\t\t\t\tprint(\"Wake Up!\")\n\t\t\t\t\tplaysound('audio.mp3')",
        "detail": "Python.stuff.Alarm_Clock_2",
        "documentation": {}
    },
    {
        "label": "\tcurrent_minute",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock_2",
        "description": "Python.stuff.Alarm_Clock_2",
        "peekOfCode": "\tcurrent_minute = now.strftime(\"%M\")\n\tcurrent_seconds = now.strftime(\"%S\")\n\tcurrent_period = now.strftime(\"%p\")\n\tif(alarm_period==current_period):\n\t\tif(alarm_hour==current_hour):\n\t\t\tif(alarm_minute==current_minute):\n\t\t\t\tif(alarm_seconds==current_seconds):\n\t\t\t\t\tprint(\"Wake Up!\")\n\t\t\t\t\tplaysound('audio.mp3')\n\t\t\t\t\tbreak",
        "detail": "Python.stuff.Alarm_Clock_2",
        "documentation": {}
    },
    {
        "label": "\tcurrent_seconds",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock_2",
        "description": "Python.stuff.Alarm_Clock_2",
        "peekOfCode": "\tcurrent_seconds = now.strftime(\"%S\")\n\tcurrent_period = now.strftime(\"%p\")\n\tif(alarm_period==current_period):\n\t\tif(alarm_hour==current_hour):\n\t\t\tif(alarm_minute==current_minute):\n\t\t\t\tif(alarm_seconds==current_seconds):\n\t\t\t\t\tprint(\"Wake Up!\")\n\t\t\t\t\tplaysound('audio.mp3')\n\t\t\t\t\tbreak",
        "detail": "Python.stuff.Alarm_Clock_2",
        "documentation": {}
    },
    {
        "label": "\tcurrent_period",
        "kind": 5,
        "importPath": "Python.stuff.Alarm_Clock_2",
        "description": "Python.stuff.Alarm_Clock_2",
        "peekOfCode": "\tcurrent_period = now.strftime(\"%p\")\n\tif(alarm_period==current_period):\n\t\tif(alarm_hour==current_hour):\n\t\t\tif(alarm_minute==current_minute):\n\t\t\t\tif(alarm_seconds==current_seconds):\n\t\t\t\t\tprint(\"Wake Up!\")\n\t\t\t\t\tplaysound('audio.mp3')\n\t\t\t\t\tbreak",
        "detail": "Python.stuff.Alarm_Clock_2",
        "documentation": {}
    },
    {
        "label": "showCalendar",
        "kind": 2,
        "importPath": "Python.stuff.Calendar",
        "description": "Python.stuff.Calendar",
        "peekOfCode": "def showCalendar():\n    gui = Tk()\n    gui.config(background='gray')\n    gui.title(\"Calendar for the yer\")\n    gui.geometry(\"550x600\")\n    year = int(year_field.get())\n    gui_content= calendar.calendar(year)\n    calYear = Label(gui, text= gui_content, font= \"Consolas 10 bold\")\n    calYear.grid(row=5, column=1,padx=20)\n    gui.mainloop()",
        "detail": "Python.stuff.Calendar",
        "documentation": {}
    },
    {
        "label": "save_contact",
        "kind": 2,
        "importPath": "Python.stuff.ContactList",
        "description": "Python.stuff.ContactList",
        "peekOfCode": "def save_contact(contact: dict, filename: str):\n    with open(filename, \"a\") as f:\n        json.dump(contact, f)\nprint(\"This program saves a Contact in you Contacts List\")\nname = input(\"Contact name? \")\nemail = input(\"Contact em  ail? \")\nphone = input(\"Contact phone? \")\nrelationship = input(\"Contact relationship? \")\ncontact = {\n    \"name\": name,",
        "detail": "Python.stuff.ContactList",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Python.stuff.ContactList",
        "description": "Python.stuff.ContactList",
        "peekOfCode": "name = input(\"Contact name? \")\nemail = input(\"Contact em  ail? \")\nphone = input(\"Contact phone? \")\nrelationship = input(\"Contact relationship? \")\ncontact = {\n    \"name\": name,\n    \"email\": email,\n    \"phone\": phone,\n    \"relationship\": relationship\n}",
        "detail": "Python.stuff.ContactList",
        "documentation": {}
    },
    {
        "label": "email",
        "kind": 5,
        "importPath": "Python.stuff.ContactList",
        "description": "Python.stuff.ContactList",
        "peekOfCode": "email = input(\"Contact em  ail? \")\nphone = input(\"Contact phone? \")\nrelationship = input(\"Contact relationship? \")\ncontact = {\n    \"name\": name,\n    \"email\": email,\n    \"phone\": phone,\n    \"relationship\": relationship\n}\nsave_contact(contact, \"contact.json\")",
        "detail": "Python.stuff.ContactList",
        "documentation": {}
    },
    {
        "label": "phone",
        "kind": 5,
        "importPath": "Python.stuff.ContactList",
        "description": "Python.stuff.ContactList",
        "peekOfCode": "phone = input(\"Contact phone? \")\nrelationship = input(\"Contact relationship? \")\ncontact = {\n    \"name\": name,\n    \"email\": email,\n    \"phone\": phone,\n    \"relationship\": relationship\n}\nsave_contact(contact, \"contact.json\")",
        "detail": "Python.stuff.ContactList",
        "documentation": {}
    },
    {
        "label": "relationship",
        "kind": 5,
        "importPath": "Python.stuff.ContactList",
        "description": "Python.stuff.ContactList",
        "peekOfCode": "relationship = input(\"Contact relationship? \")\ncontact = {\n    \"name\": name,\n    \"email\": email,\n    \"phone\": phone,\n    \"relationship\": relationship\n}\nsave_contact(contact, \"contact.json\")",
        "detail": "Python.stuff.ContactList",
        "documentation": {}
    },
    {
        "label": "contact",
        "kind": 5,
        "importPath": "Python.stuff.ContactList",
        "description": "Python.stuff.ContactList",
        "peekOfCode": "contact = {\n    \"name\": name,\n    \"email\": email,\n    \"phone\": phone,\n    \"relationship\": relationship\n}\nsave_contact(contact, \"contact.json\")",
        "detail": "Python.stuff.ContactList",
        "documentation": {}
    },
    {
        "label": "digital_clock",
        "kind": 2,
        "importPath": "Python.stuff.DigitalClock",
        "description": "Python.stuff.DigitalClock",
        "peekOfCode": "def digital_clock():\n        time_live = time.strftime(\"%H:%M:%S\")\n        label.config(text=time_live)\n        label.after(200, digital_clock)\ndigital_clock()\napp_window.mainloop()",
        "detail": "Python.stuff.DigitalClock",
        "documentation": {}
    },
    {
        "label": "app_window",
        "kind": 5,
        "importPath": "Python.stuff.DigitalClock",
        "description": "Python.stuff.DigitalClock",
        "peekOfCode": "app_window = Tk()\napp_window.title(\"Digital Clock\")\napp_window.geometry(\"420x150\")\napp_window.resizable(1,1)\ntext_font= (\"Boulder\", 68, 'bold')\nbackground = \"#f2e750\"\nforeground= \"#363529\"\nborder_width = 25 \nlabel = Label(app_window, font=text_font, bg=background, fg=foreground, bd=border_width)\nlabel.grid(row=0, column=1)",
        "detail": "Python.stuff.DigitalClock",
        "documentation": {}
    },
    {
        "label": "background",
        "kind": 5,
        "importPath": "Python.stuff.DigitalClock",
        "description": "Python.stuff.DigitalClock",
        "peekOfCode": "background = \"#f2e750\"\nforeground= \"#363529\"\nborder_width = 25 \nlabel = Label(app_window, font=text_font, bg=background, fg=foreground, bd=border_width)\nlabel.grid(row=0, column=1)\ndef digital_clock():\n        time_live = time.strftime(\"%H:%M:%S\")\n        label.config(text=time_live)\n        label.after(200, digital_clock)\ndigital_clock()",
        "detail": "Python.stuff.DigitalClock",
        "documentation": {}
    },
    {
        "label": "border_width",
        "kind": 5,
        "importPath": "Python.stuff.DigitalClock",
        "description": "Python.stuff.DigitalClock",
        "peekOfCode": "border_width = 25 \nlabel = Label(app_window, font=text_font, bg=background, fg=foreground, bd=border_width)\nlabel.grid(row=0, column=1)\ndef digital_clock():\n        time_live = time.strftime(\"%H:%M:%S\")\n        label.config(text=time_live)\n        label.after(200, digital_clock)\ndigital_clock()\napp_window.mainloop()",
        "detail": "Python.stuff.DigitalClock",
        "documentation": {}
    },
    {
        "label": "label",
        "kind": 5,
        "importPath": "Python.stuff.DigitalClock",
        "description": "Python.stuff.DigitalClock",
        "peekOfCode": "label = Label(app_window, font=text_font, bg=background, fg=foreground, bd=border_width)\nlabel.grid(row=0, column=1)\ndef digital_clock():\n        time_live = time.strftime(\"%H:%M:%S\")\n        label.config(text=time_live)\n        label.after(200, digital_clock)\ndigital_clock()\napp_window.mainloop()",
        "detail": "Python.stuff.DigitalClock",
        "documentation": {}
    },
    {
        "label": "Employees",
        "kind": 6,
        "importPath": "Python.stuff.Employees",
        "description": "Python.stuff.Employees",
        "peekOfCode": "class Employees:\n\tdef __init__(self, name, department, role, salary, years_employed):\n\t\tself.name = name\n\t\tself.department = department\n\t\tself.role = role\n\t\tself.salary = salary\n\t\tself.years_employed = years_employed",
        "detail": "Python.stuff.Employees",
        "documentation": {}
    },
    {
        "label": "\t\tself.name",
        "kind": 5,
        "importPath": "Python.stuff.Employees",
        "description": "Python.stuff.Employees",
        "peekOfCode": "\t\tself.name = name\n\t\tself.department = department\n\t\tself.role = role\n\t\tself.salary = salary\n\t\tself.years_employed = years_employed",
        "detail": "Python.stuff.Employees",
        "documentation": {}
    },
    {
        "label": "\t\tself.department",
        "kind": 5,
        "importPath": "Python.stuff.Employees",
        "description": "Python.stuff.Employees",
        "peekOfCode": "\t\tself.department = department\n\t\tself.role = role\n\t\tself.salary = salary\n\t\tself.years_employed = years_employed",
        "detail": "Python.stuff.Employees",
        "documentation": {}
    },
    {
        "label": "\t\tself.role",
        "kind": 5,
        "importPath": "Python.stuff.Employees",
        "description": "Python.stuff.Employees",
        "peekOfCode": "\t\tself.role = role\n\t\tself.salary = salary\n\t\tself.years_employed = years_employed",
        "detail": "Python.stuff.Employees",
        "documentation": {}
    },
    {
        "label": "\t\tself.salary",
        "kind": 5,
        "importPath": "Python.stuff.Employees",
        "description": "Python.stuff.Employees",
        "peekOfCode": "\t\tself.salary = salary\n\t\tself.years_employed = years_employed",
        "detail": "Python.stuff.Employees",
        "documentation": {}
    },
    {
        "label": "\t\tself.years_employed",
        "kind": 5,
        "importPath": "Python.stuff.Employees",
        "description": "Python.stuff.Employees",
        "peekOfCode": "\t\tself.years_employed = years_employed",
        "detail": "Python.stuff.Employees",
        "documentation": {}
    },
    {
        "label": "getAverageL",
        "kind": 2,
        "importPath": "Python.stuff.Image_to_ASCII_art",
        "description": "Python.stuff.Image_to_ASCII_art",
        "peekOfCode": "def getAverageL(image):\n    \"\"\"\n    Given PIL Image, return average value of grayscale value\n    \"\"\"\n    # get image as numby array\n    im = np.array(image)\n    # get shape\n    w,h = im.shape\n    # get average\n    return np.average(im.reshape(w*h))",
        "detail": "Python.stuff.Image_to_ASCII_art",
        "documentation": {}
    },
    {
        "label": "convertImageToAscii",
        "kind": 2,
        "importPath": "Python.stuff.Image_to_ASCII_art",
        "description": "Python.stuff.Image_to_ASCII_art",
        "peekOfCode": "def convertImageToAscii(fileName, cols, scale, moreLevels):\n    \"\"\"\n    Given Image and dims (rows, cols) returns an m*n list of Images\n    \"\"\"\n    # declare globals\n    global gscale1, gscale2\n    # open image and convert to grayscale\n    image = Image.open(fileName).convert('L')\n    # store dimensions\n    W, H = image.size[0], image.size[1]",
        "detail": "Python.stuff.Image_to_ASCII_art",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Python.stuff.Image_to_ASCII_art",
        "description": "Python.stuff.Image_to_ASCII_art",
        "peekOfCode": "def main():\n    # create parser\n    descStr = \"This program converts an image into ASCII art.\"\n    parser = argparse.ArgumentParser(description=descStr)\n    # add expected arguments\n    parser.add_argument('--file', dest='imageFile', required=True)\n    parser.add_argument('--scale', dest='scale', required=False)\n    parser.add_argument('--out', dest='outFile', required=False)\n    parser.add_argument('--cols', dest='cols', required=False)\n    parser.add_argument('--morelevels',dest='moreLevels',action='store_true')",
        "detail": "Python.stuff.Image_to_ASCII_art",
        "documentation": {}
    },
    {
        "label": "gscale1",
        "kind": 5,
        "importPath": "Python.stuff.Image_to_ASCII_art",
        "description": "Python.stuff.Image_to_ASCII_art",
        "peekOfCode": "gscale1 = \"$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\\|i{}[]?-_+~<>i!lI;:,\\\"^`'.\"\n# 10 levels of grey\ngscale2 = '@%#*+=-:.'\ndef getAverageL(image):\n    \"\"\"\n    Given PIL Image, return average value of grayscale value\n    \"\"\"\n    # get image as numby array\n    im = np.array(image)\n    # get shape",
        "detail": "Python.stuff.Image_to_ASCII_art",
        "documentation": {}
    },
    {
        "label": "gscale2",
        "kind": 5,
        "importPath": "Python.stuff.Image_to_ASCII_art",
        "description": "Python.stuff.Image_to_ASCII_art",
        "peekOfCode": "gscale2 = '@%#*+=-:.'\ndef getAverageL(image):\n    \"\"\"\n    Given PIL Image, return average value of grayscale value\n    \"\"\"\n    # get image as numby array\n    im = np.array(image)\n    # get shape\n    w,h = im.shape\n    # get average",
        "detail": "Python.stuff.Image_to_ASCII_art",
        "documentation": {}
    },
    {
        "label": "who_am_i",
        "kind": 2,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "def who_am_i(): #this is a fucntion without parameters\n\tname = \"Heath\" #local variable\n\tage = 30\n\tprint(\"My name is \" + name + \" and I am  \" + str(age) + \" years old.\")\nwho_am_i()\ndef add_one_hundred(num):\n\tprint(num + 100)\nadd_one_hundred(100)\ndef add(x,y):\n\tprint(x + y)",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "add_one_hundred",
        "kind": 2,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "def add_one_hundred(num):\n\tprint(num + 100)\nadd_one_hundred(100)\ndef add(x,y):\n\tprint(x + y)\nadd(7,7)\ndef multiply(x,y):\n\treturn x * y\nmultiply(7,7)\nprint(multiply(7,7))",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "def add(x,y):\n\tprint(x + y)\nadd(7,7)\ndef multiply(x,y):\n\treturn x * y\nmultiply(7,7)\nprint(multiply(7,7))\ndef square_root(x):\n\tprint(x ** .5)\nsquare_root(64)",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "def multiply(x,y):\n\treturn x * y\nmultiply(7,7)\nprint(multiply(7,7))\ndef square_root(x):\n\tprint(x ** .5)\nsquare_root(64)\ndef nl(): #new line\n\tprint('\\n')\nnl()",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "square_root",
        "kind": 2,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "def square_root(x):\n\tprint(x ** .5)\nsquare_root(64)\ndef nl(): #new line\n\tprint('\\n')\nnl()\n#BOOLEAN EXPRESSIONS (TRUE OR FALSE )\nbool1 = True\nbool2 = 3*3 == 9\nbool3 = False",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "nl",
        "kind": 2,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "def nl(): #new line\n\tprint('\\n')\nnl()\n#BOOLEAN EXPRESSIONS (TRUE OR FALSE )\nbool1 = True\nbool2 = 3*3 == 9\nbool3 = False\nbool4 = 3*3 != 9\nprint(bool1,bool2,bool3,bool4)\nprint(type(bool1))",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "drink",
        "kind": 2,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "def drink(money):\n\tif money >= 2: \n\t\treturn \"You've got yourself a drink!\"\n\telse:\n\t\treturn \"No drink for you!\"\nprint(drink(3))\nprint(drink(1))\ndef alcohol(age,money):\n\tif (age >= 21) and (money >= 5):\n\t\treturn \"We're getting a drink!\"",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "alcohol",
        "kind": 2,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "def alcohol(age,money):\n\tif (age >= 21) and (money >= 5):\n\t\treturn \"We're getting a drink!\"\n\telif (age >= 21) and (money < 5):\n\t\treturn \"Come back with more money!\"\n\telif (age < 21) and (money >= 5):\n\t\treturn \"Nice try kid!\"\n\telse: \n\t\treturn \"You're too young and too poor.\"\nprint(alcohol(21,5))",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "quote",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "quote = \"all is fair in love and war.\"\nprint(quote)\nprint(quote.upper()) #uppercase\nprint(quote.lower()) #lowercase\nprint(quote.title()) #title case\nprint(len(quote)) #counts characters\nname = \"Adam\"\nage = 43 #int\ngpa = 3.7 #float - has a decimal\nprint(int(age))",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "name = \"Adam\"\nage = 43 #int\ngpa = 3.7 #float - has a decimal\nprint(int(age))\nprint(int(30.1))\nprint(int(30.9)) #will it round? NO.\nprint(\"My name is \" + name + \" and I am \" + str(age) + \" years old.\")\nage += 1\nprint(age)\nbirthday = 1",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "age = 43 #int\ngpa = 3.7 #float - has a decimal\nprint(int(age))\nprint(int(30.1))\nprint(int(30.9)) #will it round? NO.\nprint(\"My name is \" + name + \" and I am \" + str(age) + \" years old.\")\nage += 1\nprint(age)\nbirthday = 1\nage+= birthday",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "gpa",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "gpa = 3.7 #float - has a decimal\nprint(int(age))\nprint(int(30.1))\nprint(int(30.9)) #will it round? NO.\nprint(\"My name is \" + name + \" and I am \" + str(age) + \" years old.\")\nage += 1\nprint(age)\nbirthday = 1\nage+= birthday\nprint(age)",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "birthday",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "birthday = 1\nage+= birthday\nprint(age)\nprint('\\n')\n#FUNCTIONS\ndef who_am_i(): #this is a fucntion without parameters\n\tname = \"Heath\" #local variable\n\tage = 30\n\tprint(\"My name is \" + name + \" and I am  \" + str(age) + \" years old.\")\nwho_am_i()",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "\tname",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "\tname = \"Heath\" #local variable\n\tage = 30\n\tprint(\"My name is \" + name + \" and I am  \" + str(age) + \" years old.\")\nwho_am_i()\ndef add_one_hundred(num):\n\tprint(num + 100)\nadd_one_hundred(100)\ndef add(x,y):\n\tprint(x + y)\nadd(7,7)",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "\tage",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "\tage = 30\n\tprint(\"My name is \" + name + \" and I am  \" + str(age) + \" years old.\")\nwho_am_i()\ndef add_one_hundred(num):\n\tprint(num + 100)\nadd_one_hundred(100)\ndef add(x,y):\n\tprint(x + y)\nadd(7,7)\ndef multiply(x,y):",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "bool1",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "bool1 = True\nbool2 = 3*3 == 9\nbool3 = False\nbool4 = 3*3 != 9\nprint(bool1,bool2,bool3,bool4)\nprint(type(bool1))\nbool5 = \"True\"\nprint(type(bool5))\nnl\n#RELATIONAL AND BOOLEAN OPERATORS",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "bool2",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "bool2 = 3*3 == 9\nbool3 = False\nbool4 = 3*3 != 9\nprint(bool1,bool2,bool3,bool4)\nprint(type(bool1))\nbool5 = \"True\"\nprint(type(bool5))\nnl\n#RELATIONAL AND BOOLEAN OPERATORS\ngreater_than = 7 > 5",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "bool3",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "bool3 = False\nbool4 = 3*3 != 9\nprint(bool1,bool2,bool3,bool4)\nprint(type(bool1))\nbool5 = \"True\"\nprint(type(bool5))\nnl\n#RELATIONAL AND BOOLEAN OPERATORS\ngreater_than = 7 > 5\nless_than = 5 < 7",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "bool4",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "bool4 = 3*3 != 9\nprint(bool1,bool2,bool3,bool4)\nprint(type(bool1))\nbool5 = \"True\"\nprint(type(bool5))\nnl\n#RELATIONAL AND BOOLEAN OPERATORS\ngreater_than = 7 > 5\nless_than = 5 < 7\ngreater_than_equal_to = 7 >= 7",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "bool5",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "bool5 = \"True\"\nprint(type(bool5))\nnl\n#RELATIONAL AND BOOLEAN OPERATORS\ngreater_than = 7 > 5\nless_than = 5 < 7\ngreater_than_equal_to = 7 >= 7\nless_than_equal_to = 7 <= 7\ntest_and = (7 > 5) and (5 < 7) #True\ntest_and2 = (7 > 5) and (5 > 7) #False",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "greater_than",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "greater_than = 7 > 5\nless_than = 5 < 7\ngreater_than_equal_to = 7 >= 7\nless_than_equal_to = 7 <= 7\ntest_and = (7 > 5) and (5 < 7) #True\ntest_and2 = (7 > 5) and (5 > 7) #False\ntest_or = (7 > 5) or (7 < 7) #True\ntest_or2 = (7 > 5) or (7 > 7) #True\ntest_not = not True #False\nnl()",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "less_than",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "less_than = 5 < 7\ngreater_than_equal_to = 7 >= 7\nless_than_equal_to = 7 <= 7\ntest_and = (7 > 5) and (5 < 7) #True\ntest_and2 = (7 > 5) and (5 > 7) #False\ntest_or = (7 > 5) or (7 < 7) #True\ntest_or2 = (7 > 5) or (7 > 7) #True\ntest_not = not True #False\nnl()\n#CONDITIONAL STATEMENTS - if/else",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "greater_than_equal_to",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "greater_than_equal_to = 7 >= 7\nless_than_equal_to = 7 <= 7\ntest_and = (7 > 5) and (5 < 7) #True\ntest_and2 = (7 > 5) and (5 > 7) #False\ntest_or = (7 > 5) or (7 < 7) #True\ntest_or2 = (7 > 5) or (7 > 7) #True\ntest_not = not True #False\nnl()\n#CONDITIONAL STATEMENTS - if/else\ndef drink(money):",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "less_than_equal_to",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "less_than_equal_to = 7 <= 7\ntest_and = (7 > 5) and (5 < 7) #True\ntest_and2 = (7 > 5) and (5 > 7) #False\ntest_or = (7 > 5) or (7 < 7) #True\ntest_or2 = (7 > 5) or (7 > 7) #True\ntest_not = not True #False\nnl()\n#CONDITIONAL STATEMENTS - if/else\ndef drink(money):\n\tif money >= 2: ",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "test_and",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "test_and = (7 > 5) and (5 < 7) #True\ntest_and2 = (7 > 5) and (5 > 7) #False\ntest_or = (7 > 5) or (7 < 7) #True\ntest_or2 = (7 > 5) or (7 > 7) #True\ntest_not = not True #False\nnl()\n#CONDITIONAL STATEMENTS - if/else\ndef drink(money):\n\tif money >= 2: \n\t\treturn \"You've got yourself a drink!\"",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "test_and2",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "test_and2 = (7 > 5) and (5 > 7) #False\ntest_or = (7 > 5) or (7 < 7) #True\ntest_or2 = (7 > 5) or (7 > 7) #True\ntest_not = not True #False\nnl()\n#CONDITIONAL STATEMENTS - if/else\ndef drink(money):\n\tif money >= 2: \n\t\treturn \"You've got yourself a drink!\"\n\telse:",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "test_or",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "test_or = (7 > 5) or (7 < 7) #True\ntest_or2 = (7 > 5) or (7 > 7) #True\ntest_not = not True #False\nnl()\n#CONDITIONAL STATEMENTS - if/else\ndef drink(money):\n\tif money >= 2: \n\t\treturn \"You've got yourself a drink!\"\n\telse:\n\t\treturn \"No drink for you!\"",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "test_or2",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "test_or2 = (7 > 5) or (7 > 7) #True\ntest_not = not True #False\nnl()\n#CONDITIONAL STATEMENTS - if/else\ndef drink(money):\n\tif money >= 2: \n\t\treturn \"You've got yourself a drink!\"\n\telse:\n\t\treturn \"No drink for you!\"\nprint(drink(3))",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "test_not",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "test_not = not True #False\nnl()\n#CONDITIONAL STATEMENTS - if/else\ndef drink(money):\n\tif money >= 2: \n\t\treturn \"You've got yourself a drink!\"\n\telse:\n\t\treturn \"No drink for you!\"\nprint(drink(3))\nprint(drink(1))",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "movies",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "movies = [\"When Harry Met Sally\", \"The Hangover\", \"The Perks of Being a Wallflower\", \"The Exorsist\",]\nprint(movies[1]) #returns the second item in the list \nprint(movies[0]) #return the first item in the list\nprint(movies[1:3]) #reurn the first index number given right until the last number, but not include the last number\nprint(movies[1:])\nprint(movies[:1]) \nprint(movies[-1]) #return last item in list \nprint(len(movies)) #count itmes in the list\nmovies.append(\"JAWS\")\nprint(movies) #appends to the end of the list ",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "amber_movies",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "amber_movies = ['Just Go With It', '50 First Dates']\nour_favorite_movies = movies + amber_movies\nprint(our_favorite_movies)\ngrades = [[\"Bob\", 82], [\"Alice\", 90], [\"Jeff\", 73]]\nbobs_grade = grades[0][1]\nprint(bobs_grade)\ngrades[0][1] = 83\nprint(grades)\nnl()\n#TUPLES - Do not change, ()",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "our_favorite_movies",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "our_favorite_movies = movies + amber_movies\nprint(our_favorite_movies)\ngrades = [[\"Bob\", 82], [\"Alice\", 90], [\"Jeff\", 73]]\nbobs_grade = grades[0][1]\nprint(bobs_grade)\ngrades[0][1] = 83\nprint(grades)\nnl()\n#TUPLES - Do not change, ()\ngrades = (\"a\", \"b\", \"c\", \"d\", \"f\")",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "grades",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "grades = [[\"Bob\", 82], [\"Alice\", 90], [\"Jeff\", 73]]\nbobs_grade = grades[0][1]\nprint(bobs_grade)\ngrades[0][1] = 83\nprint(grades)\nnl()\n#TUPLES - Do not change, ()\ngrades = (\"a\", \"b\", \"c\", \"d\", \"f\")\nprint(grades[1])\nnl()",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "bobs_grade",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "bobs_grade = grades[0][1]\nprint(bobs_grade)\ngrades[0][1] = 83\nprint(grades)\nnl()\n#TUPLES - Do not change, ()\ngrades = (\"a\", \"b\", \"c\", \"d\", \"f\")\nprint(grades[1])\nnl()\n#LOOPING",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "grades[0][1]",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "grades[0][1] = 83\nprint(grades)\nnl()\n#TUPLES - Do not change, ()\ngrades = (\"a\", \"b\", \"c\", \"d\", \"f\")\nprint(grades[1])\nnl()\n#LOOPING\n#for loop - start to finish of an iterate\nvegetables = [\"cucumber\", \"Spinach\", \"cabbage\"]",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "grades",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "grades = (\"a\", \"b\", \"c\", \"d\", \"f\")\nprint(grades[1])\nnl()\n#LOOPING\n#for loop - start to finish of an iterate\nvegetables = [\"cucumber\", \"Spinach\", \"cabbage\"]\nfor x in vegetables:\n\tprint(x)\n#While loop - execute as long as True\ni = 1",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "vegetables",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "vegetables = [\"cucumber\", \"Spinach\", \"cabbage\"]\nfor x in vegetables:\n\tprint(x)\n#While loop - execute as long as True\ni = 1\nwhile i < 10:\n\tprint(i)\n\ti += 1 \nnl()\n#ADVANCED STRINGS",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "i = 1\nwhile i < 10:\n\tprint(i)\n\ti += 1 \nnl()\n#ADVANCED STRINGS\nmy_name = \"Heath\"\nprint(my_name[0]) #first letter\nprint(my_name[-1]) #last letter\nsentence = \"This is a sentence.\"",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "my_name",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "my_name = \"Heath\"\nprint(my_name[0]) #first letter\nprint(my_name[-1]) #last letter\nsentence = \"This is a sentence.\"\nprint(sentence[:4])\nprint(sentence.split()) #delimeter - default is a space\nsentence_split = sentence.split()\nsentence_join = ' '.join(sentence_split)\nprint(sentence_join)\nquote = \"He said, 'give me all your money'\"",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "sentence = \"This is a sentence.\"\nprint(sentence[:4])\nprint(sentence.split()) #delimeter - default is a space\nsentence_split = sentence.split()\nsentence_join = ' '.join(sentence_split)\nprint(sentence_join)\nquote = \"He said, 'give me all your money'\"\nprint(quote)\nquote = \"He said, \\\"give me all your money\\\"\"\nprint(quote)",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "sentence_split",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "sentence_split = sentence.split()\nsentence_join = ' '.join(sentence_split)\nprint(sentence_join)\nquote = \"He said, 'give me all your money'\"\nprint(quote)\nquote = \"He said, \\\"give me all your money\\\"\"\nprint(quote)\ntoo_much_space = \"             hello       \"\nprint(too_much_space.strip())\nprint(\"A\" in \"Apple\") #True",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "sentence_join",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "sentence_join = ' '.join(sentence_split)\nprint(sentence_join)\nquote = \"He said, 'give me all your money'\"\nprint(quote)\nquote = \"He said, \\\"give me all your money\\\"\"\nprint(quote)\ntoo_much_space = \"             hello       \"\nprint(too_much_space.strip())\nprint(\"A\" in \"Apple\") #True\nprint(\"a\" in \"Apple\")#Flase",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "quote",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "quote = \"He said, 'give me all your money'\"\nprint(quote)\nquote = \"He said, \\\"give me all your money\\\"\"\nprint(quote)\ntoo_much_space = \"             hello       \"\nprint(too_much_space.strip())\nprint(\"A\" in \"Apple\") #True\nprint(\"a\" in \"Apple\")#Flase\nletter = \"A\"\nword = \"Apple\"",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "quote",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "quote = \"He said, \\\"give me all your money\\\"\"\nprint(quote)\ntoo_much_space = \"             hello       \"\nprint(too_much_space.strip())\nprint(\"A\" in \"Apple\") #True\nprint(\"a\" in \"Apple\")#Flase\nletter = \"A\"\nword = \"Apple\"\nprint(letter.lower() in word.lower()) #improved\nmovie = \"The Hangover\"",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "too_much_space",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "too_much_space = \"             hello       \"\nprint(too_much_space.strip())\nprint(\"A\" in \"Apple\") #True\nprint(\"a\" in \"Apple\")#Flase\nletter = \"A\"\nword = \"Apple\"\nprint(letter.lower() in word.lower()) #improved\nmovie = \"The Hangover\"\nprint(\"My favorite movie is {}.\".format(movie))\nprint(\"My fovorite movie is %s. \" % movie)",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "letter",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "letter = \"A\"\nword = \"Apple\"\nprint(letter.lower() in word.lower()) #improved\nmovie = \"The Hangover\"\nprint(\"My favorite movie is {}.\".format(movie))\nprint(\"My fovorite movie is %s. \" % movie)\nprint(f\"My favorite movie is {movie},\")\nnl()\n#DICTIONAIRIES - key/value pairs {}\ndrinks = {\"White Russian\": 7, \"Old Fashioned\": 10, \"Lemon Drop\": 8} #drinks is the key, price is the value",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "word = \"Apple\"\nprint(letter.lower() in word.lower()) #improved\nmovie = \"The Hangover\"\nprint(\"My favorite movie is {}.\".format(movie))\nprint(\"My fovorite movie is %s. \" % movie)\nprint(f\"My favorite movie is {movie},\")\nnl()\n#DICTIONAIRIES - key/value pairs {}\ndrinks = {\"White Russian\": 7, \"Old Fashioned\": 10, \"Lemon Drop\": 8} #drinks is the key, price is the value\nprint(drinks)",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "movie",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "movie = \"The Hangover\"\nprint(\"My favorite movie is {}.\".format(movie))\nprint(\"My fovorite movie is %s. \" % movie)\nprint(f\"My favorite movie is {movie},\")\nnl()\n#DICTIONAIRIES - key/value pairs {}\ndrinks = {\"White Russian\": 7, \"Old Fashioned\": 10, \"Lemon Drop\": 8} #drinks is the key, price is the value\nprint(drinks)\nemployees = {\"Finance\": [\"Bob\", \"Linda\", \"Tina\"], \"IT\": [\"gene\", \"Louise\", \"Teddy\"], \"HR\": [\"Jimmy Jr.\", \"Mort\"]}\nprint(employees)",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "drinks",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "drinks = {\"White Russian\": 7, \"Old Fashioned\": 10, \"Lemon Drop\": 8} #drinks is the key, price is the value\nprint(drinks)\nemployees = {\"Finance\": [\"Bob\", \"Linda\", \"Tina\"], \"IT\": [\"gene\", \"Louise\", \"Teddy\"], \"HR\": [\"Jimmy Jr.\", \"Mort\"]}\nprint(employees)\nemployees['Legal'] = [\"Mr. Frond\"] #adds new key:value pair\nprint(employees)\nemployees.update({\"Sales\": [\"Andie\", \"Ollie\"]}) #adds new key:value pair\nprint(employees)\ndrinks['White Russian'] = 8\nprint(drinks)",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "employees",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "employees = {\"Finance\": [\"Bob\", \"Linda\", \"Tina\"], \"IT\": [\"gene\", \"Louise\", \"Teddy\"], \"HR\": [\"Jimmy Jr.\", \"Mort\"]}\nprint(employees)\nemployees['Legal'] = [\"Mr. Frond\"] #adds new key:value pair\nprint(employees)\nemployees.update({\"Sales\": [\"Andie\", \"Ollie\"]}) #adds new key:value pair\nprint(employees)\ndrinks['White Russian'] = 8\nprint(drinks)\nprint(drinks.get(\"White Russian\"))",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "employees['Legal']",
        "kind": 5,
        "importPath": "Python.stuff.first",
        "description": "Python.stuff.first",
        "peekOfCode": "employees['Legal'] = [\"Mr. Frond\"] #adds new key:value pair\nprint(employees)\nemployees.update({\"Sales\": [\"Andie\", \"Ollie\"]}) #adds new key:value pair\nprint(employees)\ndrinks['White Russian'] = 8\nprint(drinks)\nprint(drinks.get(\"White Russian\"))",
        "detail": "Python.stuff.first",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Python.stuff.input",
        "description": "Python.stuff.input",
        "peekOfCode": "x = float(input(\"Give me a number: \"))\no = input(\"Give me an operator: \")\ny = float(input(\"Give me another number: \"))\nif o == \"+\":\n\tprint(x + y)\nelif o == \"-\":\n\tprint(x - y)\nelif o == \"/\":\n\tprint(x / y)\nelif o == \"*\":",
        "detail": "Python.stuff.input",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "Python.stuff.input",
        "description": "Python.stuff.input",
        "peekOfCode": "o = input(\"Give me an operator: \")\ny = float(input(\"Give me another number: \"))\nif o == \"+\":\n\tprint(x + y)\nelif o == \"-\":\n\tprint(x - y)\nelif o == \"/\":\n\tprint(x / y)\nelif o == \"*\":\n\tprint(x * y)",
        "detail": "Python.stuff.input",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Python.stuff.input",
        "description": "Python.stuff.input",
        "peekOfCode": "y = float(input(\"Give me another number: \"))\nif o == \"+\":\n\tprint(x + y)\nelif o == \"-\":\n\tprint(x - y)\nelif o == \"/\":\n\tprint(x / y)\nelif o == \"*\":\n\tprint(x * y)\nelif o == \"**\": ",
        "detail": "Python.stuff.input",
        "documentation": {}
    },
    {
        "label": "e1",
        "kind": 5,
        "importPath": "Python.stuff.ouremployees",
        "description": "Python.stuff.ouremployees",
        "peekOfCode": "e1 = Employees(\"Bob\", \"Sales\", \"Director of Sales\", 100000, 20)\ne3 = Employees(\"Linda\", \"Executive\", \"CIO\", 150000, 10)\nprint(e1.name)",
        "detail": "Python.stuff.ouremployees",
        "documentation": {}
    },
    {
        "label": "e3",
        "kind": 5,
        "importPath": "Python.stuff.ouremployees",
        "description": "Python.stuff.ouremployees",
        "peekOfCode": "e3 = Employees(\"Linda\", \"Executive\", \"CIO\", 150000, 10)\nprint(e1.name)",
        "detail": "Python.stuff.ouremployees",
        "documentation": {}
    },
    {
        "label": "days",
        "kind": 5,
        "importPath": "Python.stuff.readwrite",
        "description": "Python.stuff.readwrite",
        "peekOfCode": "days = open('days.txt', \"a\")\ndays.write(\"\\nWednesaday\")\ndays.close()",
        "detail": "Python.stuff.readwrite",
        "documentation": {}
    },
    {
        "label": "HOST",
        "kind": 5,
        "importPath": "Python.stuff.s",
        "description": "Python.stuff.s",
        "peekOfCode": "HOST = '127.0.0.1'\nPORT = 7777\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #af_inet is ipv4, sock_stream is a port\ns.connect((HOST,PORT))",
        "detail": "Python.stuff.s",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "Python.stuff.s",
        "description": "Python.stuff.s",
        "peekOfCode": "PORT = 7777\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #af_inet is ipv4, sock_stream is a port\ns.connect((HOST,PORT))",
        "detail": "Python.stuff.s",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Python.stuff.s",
        "description": "Python.stuff.s",
        "peekOfCode": "s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #af_inet is ipv4, sock_stream is a port\ns.connect((HOST,PORT))",
        "detail": "Python.stuff.s",
        "documentation": {}
    },
    {
        "label": "\ttarget",
        "kind": 5,
        "importPath": "Python.stuff.scanner",
        "description": "Python.stuff.scanner",
        "peekOfCode": "\ttarget = socket.gethostbyname(sys.argv[1]) #Translate hostname to IPv4\nelse: \n\tprint(\"Invalid amount of argument.\")\n\tprint(\"Sytax: python3 scanner.py <ip>\")\n#Add a pretty banner\nprint(\".\" * 50)\nprint(\"Scanning target: \"+target)\nprint(\"Time started: \"+str(datetime.now())) \nprint(\".\" * 50)\ntry:",
        "detail": "Python.stuff.scanner",
        "documentation": {}
    },
    {
        "label": "\t\tresult",
        "kind": 5,
        "importPath": "Python.stuff.scanner",
        "description": "Python.stuff.scanner",
        "peekOfCode": "\t\tresult = s.connect_ex((target,port))\n\t\tif result == 0:\n\t\t\tprint(f\"Port {port} is open\")\n\t\ts.close()\nexcept KeyboardInterrupt:\n\tprint(\"\\nExiting program.\")\n\tsys.exit()\nexcept socket.gaierror:\n\tprint(\"Hostname could not be resolved,\")\n\tsys.exit()",
        "detail": "Python.stuff.scanner",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "Python.stuff.test",
        "description": "Python.stuff.test",
        "peekOfCode": "env = gym.make('MountainCar-v0')",
        "detail": "Python.stuff.test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "Python.stuff.vpngate",
        "description": "Python.stuff.vpngate",
        "peekOfCode": "__author__ = \"Andrea Lazzarotto\"\n__copyright__ = \"Copyright 2014+, Andrea Lazzarotto\"\n__license__ = \"GPLv3\"\n__version__ = \"1.0\"\n__maintainer__ = \"Andrea Lazarotto\"\n__email__ = \"andre.lazarotto@gmail.com\"\nif len(sys.argv) !=2:\n    print('usage: ') + sys.argv[0] + ' [country name | country code]'\n    exit(1)\ncountry = sys.argv[1]",
        "detail": "Python.stuff.vpngate",
        "documentation": {}
    },
    {
        "label": "__copyright__",
        "kind": 5,
        "importPath": "Python.stuff.vpngate",
        "description": "Python.stuff.vpngate",
        "peekOfCode": "__copyright__ = \"Copyright 2014+, Andrea Lazzarotto\"\n__license__ = \"GPLv3\"\n__version__ = \"1.0\"\n__maintainer__ = \"Andrea Lazarotto\"\n__email__ = \"andre.lazarotto@gmail.com\"\nif len(sys.argv) !=2:\n    print('usage: ') + sys.argv[0] + ' [country name | country code]'\n    exit(1)\ncountry = sys.argv[1]\nif len(country) == 2:",
        "detail": "Python.stuff.vpngate",
        "documentation": {}
    },
    {
        "label": "__license__",
        "kind": 5,
        "importPath": "Python.stuff.vpngate",
        "description": "Python.stuff.vpngate",
        "peekOfCode": "__license__ = \"GPLv3\"\n__version__ = \"1.0\"\n__maintainer__ = \"Andrea Lazarotto\"\n__email__ = \"andre.lazarotto@gmail.com\"\nif len(sys.argv) !=2:\n    print('usage: ') + sys.argv[0] + ' [country name | country code]'\n    exit(1)\ncountry = sys.argv[1]\nif len(country) == 2:\n    i = 6 # short name for country",
        "detail": "Python.stuff.vpngate",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "Python.stuff.vpngate",
        "description": "Python.stuff.vpngate",
        "peekOfCode": "__version__ = \"1.0\"\n__maintainer__ = \"Andrea Lazarotto\"\n__email__ = \"andre.lazarotto@gmail.com\"\nif len(sys.argv) !=2:\n    print('usage: ') + sys.argv[0] + ' [country name | country code]'\n    exit(1)\ncountry = sys.argv[1]\nif len(country) == 2:\n    i = 6 # short name for country\nelif len(country) > 2:",
        "detail": "Python.stuff.vpngate",
        "documentation": {}
    },
    {
        "label": "__maintainer__",
        "kind": 5,
        "importPath": "Python.stuff.vpngate",
        "description": "Python.stuff.vpngate",
        "peekOfCode": "__maintainer__ = \"Andrea Lazarotto\"\n__email__ = \"andre.lazarotto@gmail.com\"\nif len(sys.argv) !=2:\n    print('usage: ') + sys.argv[0] + ' [country name | country code]'\n    exit(1)\ncountry = sys.argv[1]\nif len(country) == 2:\n    i = 6 # short name for country\nelif len(country) > 2:\n    i = 5 #long name for country",
        "detail": "Python.stuff.vpngate",
        "documentation": {}
    },
    {
        "label": "__email__",
        "kind": 5,
        "importPath": "Python.stuff.vpngate",
        "description": "Python.stuff.vpngate",
        "peekOfCode": "__email__ = \"andre.lazarotto@gmail.com\"\nif len(sys.argv) !=2:\n    print('usage: ') + sys.argv[0] + ' [country name | country code]'\n    exit(1)\ncountry = sys.argv[1]\nif len(country) == 2:\n    i = 6 # short name for country\nelif len(country) > 2:\n    i = 5 #long name for country\nelse:",
        "detail": "Python.stuff.vpngate",
        "documentation": {}
    },
    {
        "label": "country",
        "kind": 5,
        "importPath": "Python.stuff.vpngate",
        "description": "Python.stuff.vpngate",
        "peekOfCode": "country = sys.argv[1]\nif len(country) == 2:\n    i = 6 # short name for country\nelif len(country) > 2:\n    i = 5 #long name for country\nelse:\n    print('Country is too short!')\n    exit(1)\ntry:\n    vpn_data = requests.get('http://www.vpngate.net/api/iphone/').text.replace('\\r'.' ')",
        "detail": "Python.stuff.vpngate",
        "documentation": {}
    },
    {
        "label": "desired",
        "kind": 5,
        "importPath": "Python.stuff.vpngate",
        "description": "Python.stuff.vpngate",
        "peekOfCode": "desired = [s for in servers if country.lower() in s[i].lower()]\nfound = len(desired)\nprint('Found ' + str(found) + ' servers for country ' + country)\nif found == 0:\n    exit(1)\nsupported = [s for s in desired in len(s[-1]) > 0]\nprint(str(len(supported)) + ' of these servers support OpenVPN')\n# We pick the best server by score\nwinner = sorted(supported, key=lambda s: float(s[2].replace(',','.')), reverse=True)[0]\nprint(\"\\n== Best server ==\")",
        "detail": "Python.stuff.vpngate",
        "documentation": {}
    },
    {
        "label": "found",
        "kind": 5,
        "importPath": "Python.stuff.vpngate",
        "description": "Python.stuff.vpngate",
        "peekOfCode": "found = len(desired)\nprint('Found ' + str(found) + ' servers for country ' + country)\nif found == 0:\n    exit(1)\nsupported = [s for s in desired in len(s[-1]) > 0]\nprint(str(len(supported)) + ' of these servers support OpenVPN')\n# We pick the best server by score\nwinner = sorted(supported, key=lambda s: float(s[2].replace(',','.')), reverse=True)[0]\nprint(\"\\n== Best server ==\")\npairs = zip(labels, winner)[:-1]",
        "detail": "Python.stuff.vpngate",
        "documentation": {}
    },
    {
        "label": "supported",
        "kind": 5,
        "importPath": "Python.stuff.vpngate",
        "description": "Python.stuff.vpngate",
        "peekOfCode": "supported = [s for s in desired in len(s[-1]) > 0]\nprint(str(len(supported)) + ' of these servers support OpenVPN')\n# We pick the best server by score\nwinner = sorted(supported, key=lambda s: float(s[2].replace(',','.')), reverse=True)[0]\nprint(\"\\n== Best server ==\")\npairs = zip(labels, winner)[:-1]\nfor (l, d) in pairs[:4]:\n    print(l + ': ' + d)\nprint(pairs[4][0] + ': ' + str(float(pairs[4][1]) / 10**6) + ' MBps')\nprint(\"Country: \" + pairs[5][1])",
        "detail": "Python.stuff.vpngate",
        "documentation": {}
    },
    {
        "label": "winner",
        "kind": 5,
        "importPath": "Python.stuff.vpngate",
        "description": "Python.stuff.vpngate",
        "peekOfCode": "winner = sorted(supported, key=lambda s: float(s[2].replace(',','.')), reverse=True)[0]\nprint(\"\\n== Best server ==\")\npairs = zip(labels, winner)[:-1]\nfor (l, d) in pairs[:4]:\n    print(l + ': ' + d)\nprint(pairs[4][0] + ': ' + str(float(pairs[4][1]) / 10**6) + ' MBps')\nprint(\"Country: \" + pairs[5][1])\nprint(\"\\nLaunching VPN...\")\n_, path = tempfile.mkstemp()\nf = open(path, 'w')",
        "detail": "Python.stuff.vpngate",
        "documentation": {}
    },
    {
        "label": "pairs",
        "kind": 5,
        "importPath": "Python.stuff.vpngate",
        "description": "Python.stuff.vpngate",
        "peekOfCode": "pairs = zip(labels, winner)[:-1]\nfor (l, d) in pairs[:4]:\n    print(l + ': ' + d)\nprint(pairs[4][0] + ': ' + str(float(pairs[4][1]) / 10**6) + ' MBps')\nprint(\"Country: \" + pairs[5][1])\nprint(\"\\nLaunching VPN...\")\n_, path = tempfile.mkstemp()\nf = open(path, 'w')\nf.write(base64.b64decode(winner[-1]))\nf.write('\\nscript-security 2\\nup /etc/openvpn/update-resolv-conf\\ndown /etc/openvpn/update-resolv-conf')",
        "detail": "Python.stuff.vpngate",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "Python.stuff.vpngate",
        "description": "Python.stuff.vpngate",
        "peekOfCode": "f = open(path, 'w')\nf.write(base64.b64decode(winner[-1]))\nf.write('\\nscript-security 2\\nup /etc/openvpn/update-resolv-conf\\ndown /etc/openvpn/update-resolv-conf')\nf.close()\nx = subprocess.Popen(['sudo', 'openvpn', '--config' path])\ntry:\n    while True:\n        time.sleep(600)\n# terminate with Ctrl+c\nexcept:",
        "detail": "Python.stuff.vpngate",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Python.stuff.vpngate",
        "description": "Python.stuff.vpngate",
        "peekOfCode": "x = subprocess.Popen(['sudo', 'openvpn', '--config' path])\ntry:\n    while True:\n        time.sleep(600)\n# terminate with Ctrl+c\nexcept:\n    try:\n        x.kill()\n    except:\n        pass",
        "detail": "Python.stuff.vpngate",
        "documentation": {}
    },
    {
        "label": "wrap",
        "kind": 2,
        "importPath": "Python.working_games.ant",
        "description": "Python.working_games.ant",
        "peekOfCode": "def wrap(value):\n    \"\"\"Wrap value around -200 and 200.\"\"\"\n    return value  # TODO\ndef draw():\n    \"\"\"Move ant and draw screen.\"\"\"\n    ant.move(aim)\n    ant.x = wrap(ant.x)\n    ant.y = wrap(ant.y)\n    aim.move(random() - 0.5)\n    aim.rotate(random() * 10 - 5)",
        "detail": "Python.working_games.ant",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "Python.working_games.ant",
        "description": "Python.working_games.ant",
        "peekOfCode": "def draw():\n    \"\"\"Move ant and draw screen.\"\"\"\n    ant.move(aim)\n    ant.x = wrap(ant.x)\n    ant.y = wrap(ant.y)\n    aim.move(random() - 0.5)\n    aim.rotate(random() * 10 - 5)\n    clear()\n    goto(ant.x, ant.y)\n    dot(4)",
        "detail": "Python.working_games.ant",
        "documentation": {}
    },
    {
        "label": "ant",
        "kind": 5,
        "importPath": "Python.working_games.ant",
        "description": "Python.working_games.ant",
        "peekOfCode": "ant = vector(0, 0)\naim = vector(2, 0)\ndef wrap(value):\n    \"\"\"Wrap value around -200 and 200.\"\"\"\n    return value  # TODO\ndef draw():\n    \"\"\"Move ant and draw screen.\"\"\"\n    ant.move(aim)\n    ant.x = wrap(ant.x)\n    ant.y = wrap(ant.y)",
        "detail": "Python.working_games.ant",
        "documentation": {}
    },
    {
        "label": "aim",
        "kind": 5,
        "importPath": "Python.working_games.ant",
        "description": "Python.working_games.ant",
        "peekOfCode": "aim = vector(2, 0)\ndef wrap(value):\n    \"\"\"Wrap value around -200 and 200.\"\"\"\n    return value  # TODO\ndef draw():\n    \"\"\"Move ant and draw screen.\"\"\"\n    ant.move(aim)\n    ant.x = wrap(ant.x)\n    ant.y = wrap(ant.y)\n    aim.move(random() - 0.5)",
        "detail": "Python.working_games.ant",
        "documentation": {}
    },
    {
        "label": "inside",
        "kind": 2,
        "importPath": "Python.working_games.avoid",
        "description": "Python.working_games.avoid",
        "peekOfCode": "def inside(point):\n    \"\"\"Return True if point on screen.\"\"\"\n    return -200 < point.x < 200 and -200 < point.y < 200\ndef draw(alive):\n    \"\"\"Draw screen objects.\"\"\"\n    clear()\n    goto(player.x, player.y)\n    color = 'blue' if alive else 'red'\n    dot(10, color)\n    for bomb in bombs:",
        "detail": "Python.working_games.avoid",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "Python.working_games.avoid",
        "description": "Python.working_games.avoid",
        "peekOfCode": "def draw(alive):\n    \"\"\"Draw screen objects.\"\"\"\n    clear()\n    goto(player.x, player.y)\n    color = 'blue' if alive else 'red'\n    dot(10, color)\n    for bomb in bombs:\n        goto(bomb.x, bomb.y)\n        dot(20, 'black')\n    update()",
        "detail": "Python.working_games.avoid",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "Python.working_games.avoid",
        "description": "Python.working_games.avoid",
        "peekOfCode": "def move():\n    \"\"\"Update player and bomb positions.\"\"\"\n    player.move(aim)\n    for bomb, speed in zip(bombs, speeds):\n        bomb.move(speed)\n    if randrange(10) == 0:\n        speed = choice(options).copy()\n        offset = randrange(-199, 200)\n        if speed == north:\n            bomb = vector(offset, -199)",
        "detail": "Python.working_games.avoid",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "Python.working_games.avoid",
        "description": "Python.working_games.avoid",
        "peekOfCode": "options = north, south, east, west\nplayer = vector(0, 0)\naim = choice(options).copy()\nbombs = []\nspeeds = []\ndef inside(point):\n    \"\"\"Return True if point on screen.\"\"\"\n    return -200 < point.x < 200 and -200 < point.y < 200\ndef draw(alive):\n    \"\"\"Draw screen objects.\"\"\"",
        "detail": "Python.working_games.avoid",
        "documentation": {}
    },
    {
        "label": "player",
        "kind": 5,
        "importPath": "Python.working_games.avoid",
        "description": "Python.working_games.avoid",
        "peekOfCode": "player = vector(0, 0)\naim = choice(options).copy()\nbombs = []\nspeeds = []\ndef inside(point):\n    \"\"\"Return True if point on screen.\"\"\"\n    return -200 < point.x < 200 and -200 < point.y < 200\ndef draw(alive):\n    \"\"\"Draw screen objects.\"\"\"\n    clear()",
        "detail": "Python.working_games.avoid",
        "documentation": {}
    },
    {
        "label": "aim",
        "kind": 5,
        "importPath": "Python.working_games.avoid",
        "description": "Python.working_games.avoid",
        "peekOfCode": "aim = choice(options).copy()\nbombs = []\nspeeds = []\ndef inside(point):\n    \"\"\"Return True if point on screen.\"\"\"\n    return -200 < point.x < 200 and -200 < point.y < 200\ndef draw(alive):\n    \"\"\"Draw screen objects.\"\"\"\n    clear()\n    goto(player.x, player.y)",
        "detail": "Python.working_games.avoid",
        "documentation": {}
    },
    {
        "label": "bombs",
        "kind": 5,
        "importPath": "Python.working_games.avoid",
        "description": "Python.working_games.avoid",
        "peekOfCode": "bombs = []\nspeeds = []\ndef inside(point):\n    \"\"\"Return True if point on screen.\"\"\"\n    return -200 < point.x < 200 and -200 < point.y < 200\ndef draw(alive):\n    \"\"\"Draw screen objects.\"\"\"\n    clear()\n    goto(player.x, player.y)\n    color = 'blue' if alive else 'red'",
        "detail": "Python.working_games.avoid",
        "documentation": {}
    },
    {
        "label": "speeds",
        "kind": 5,
        "importPath": "Python.working_games.avoid",
        "description": "Python.working_games.avoid",
        "peekOfCode": "speeds = []\ndef inside(point):\n    \"\"\"Return True if point on screen.\"\"\"\n    return -200 < point.x < 200 and -200 < point.y < 200\ndef draw(alive):\n    \"\"\"Draw screen objects.\"\"\"\n    clear()\n    goto(player.x, player.y)\n    color = 'blue' if alive else 'red'\n    dot(10, color)",
        "detail": "Python.working_games.avoid",
        "documentation": {}
    },
    {
        "label": "digits",
        "kind": 5,
        "importPath": "Python.working_games.bagels",
        "description": "Python.working_games.bagels",
        "peekOfCode": "digits = 3\nguesses = 10\nprint('I am thinking of a', digits, 'digit number.')\nprint('Try to guess what it is.')\nprint('Here are some clues:')\nprint('When I say:    That means:')\nprint('  pico         One digit is correct but in the wrong position.')\nprint('  fermi        One digit is correct and in the right position.')\nprint('  bagels       No digit is correct.')\nprint('There are no repeated digits in the number.')",
        "detail": "Python.working_games.bagels",
        "documentation": {}
    },
    {
        "label": "guesses",
        "kind": 5,
        "importPath": "Python.working_games.bagels",
        "description": "Python.working_games.bagels",
        "peekOfCode": "guesses = 10\nprint('I am thinking of a', digits, 'digit number.')\nprint('Try to guess what it is.')\nprint('Here are some clues:')\nprint('When I say:    That means:')\nprint('  pico         One digit is correct but in the wrong position.')\nprint('  fermi        One digit is correct and in the right position.')\nprint('  bagels       No digit is correct.')\nprint('There are no repeated digits in the number.')\n# Create a random number.",
        "detail": "Python.working_games.bagels",
        "documentation": {}
    },
    {
        "label": "letters",
        "kind": 5,
        "importPath": "Python.working_games.bagels",
        "description": "Python.working_games.bagels",
        "peekOfCode": "letters = sample('0123456789', digits)\nif letters[0] == '0':\n    letters.reverse()\nnumber = ''.join(letters)\nprint('I have thought up a number.')\nprint('You have', guesses, 'guesses to get it.')\ncounter = 1\nwhile True:\n    print('Guess #', counter)\n    guess = input()",
        "detail": "Python.working_games.bagels",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "Python.working_games.bagels",
        "description": "Python.working_games.bagels",
        "peekOfCode": "number = ''.join(letters)\nprint('I have thought up a number.')\nprint('You have', guesses, 'guesses to get it.')\ncounter = 1\nwhile True:\n    print('Guess #', counter)\n    guess = input()\n    if len(guess) != digits:\n        print('Wrong number of digits. Try again!')\n        continue",
        "detail": "Python.working_games.bagels",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "Python.working_games.bagels",
        "description": "Python.working_games.bagels",
        "peekOfCode": "counter = 1\nwhile True:\n    print('Guess #', counter)\n    guess = input()\n    if len(guess) != digits:\n        print('Wrong number of digits. Try again!')\n        continue\n    # Create the clues.\n    clues = []\n    for index in range(digits):",
        "detail": "Python.working_games.bagels",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 2,
        "importPath": "Python.working_games.bounce",
        "description": "Python.working_games.bounce",
        "peekOfCode": "def value():\n    \"\"\"Randomly generate value between (-5, -3) or (3, 5).\"\"\"\n    return (3 + random() * 2) * choice([1, -1])\nball = vector(0, 0)\naim = vector(value(), value())\ndef draw():\n    \"\"\"Move ball and draw game.\"\"\"\n    ball.move(aim)\n    x = ball.x\n    y = ball.y",
        "detail": "Python.working_games.bounce",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "Python.working_games.bounce",
        "description": "Python.working_games.bounce",
        "peekOfCode": "def draw():\n    \"\"\"Move ball and draw game.\"\"\"\n    ball.move(aim)\n    x = ball.x\n    y = ball.y\n    if x < -200 or x > 200:\n        aim.x = -aim.x\n    if y < -200 or y > 200:\n        aim.y = -aim.y\n    clear()",
        "detail": "Python.working_games.bounce",
        "documentation": {}
    },
    {
        "label": "ball",
        "kind": 5,
        "importPath": "Python.working_games.bounce",
        "description": "Python.working_games.bounce",
        "peekOfCode": "ball = vector(0, 0)\naim = vector(value(), value())\ndef draw():\n    \"\"\"Move ball and draw game.\"\"\"\n    ball.move(aim)\n    x = ball.x\n    y = ball.y\n    if x < -200 or x > 200:\n        aim.x = -aim.x\n    if y < -200 or y > 200:",
        "detail": "Python.working_games.bounce",
        "documentation": {}
    },
    {
        "label": "aim",
        "kind": 5,
        "importPath": "Python.working_games.bounce",
        "description": "Python.working_games.bounce",
        "peekOfCode": "aim = vector(value(), value())\ndef draw():\n    \"\"\"Move ball and draw game.\"\"\"\n    ball.move(aim)\n    x = ball.x\n    y = ball.y\n    if x < -200 or x > 200:\n        aim.x = -aim.x\n    if y < -200 or y > 200:\n        aim.y = -aim.y",
        "detail": "Python.working_games.bounce",
        "documentation": {}
    },
    {
        "label": "tap",
        "kind": 2,
        "importPath": "Python.working_games.cannon",
        "description": "Python.working_games.cannon",
        "peekOfCode": "def tap(x, y):\n    \"\"\"Respond to screen tap.\"\"\"\n    if not inside(ball):\n        ball.x = -199\n        ball.y = -199\n        speed.x = (x + 200) / 25\n        speed.y = (y + 200) / 25\ndef inside(xy):\n    \"\"\"Return True if xy within screen.\"\"\"\n    return -200 < xy.x < 200 and -200 < xy.y < 200",
        "detail": "Python.working_games.cannon",
        "documentation": {}
    },
    {
        "label": "inside",
        "kind": 2,
        "importPath": "Python.working_games.cannon",
        "description": "Python.working_games.cannon",
        "peekOfCode": "def inside(xy):\n    \"\"\"Return True if xy within screen.\"\"\"\n    return -200 < xy.x < 200 and -200 < xy.y < 200\ndef draw():\n    \"\"\"Draw ball and targets.\"\"\"\n    clear()\n    for target in targets:\n        goto(target.x, target.y)\n        dot(20, 'blue')\n    if inside(ball):",
        "detail": "Python.working_games.cannon",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "Python.working_games.cannon",
        "description": "Python.working_games.cannon",
        "peekOfCode": "def draw():\n    \"\"\"Draw ball and targets.\"\"\"\n    clear()\n    for target in targets:\n        goto(target.x, target.y)\n        dot(20, 'blue')\n    if inside(ball):\n        goto(ball.x, ball.y)\n        dot(6, 'red')\n    update()",
        "detail": "Python.working_games.cannon",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "Python.working_games.cannon",
        "description": "Python.working_games.cannon",
        "peekOfCode": "def move():\n    \"\"\"Move ball and targets.\"\"\"\n    if randrange(40) == 0:\n        y = randrange(-150, 150)\n        target = vector(200, y)\n        targets.append(target)\n    for target in targets:\n        target.x -= 0.5\n    if inside(ball):\n        speed.y -= 0.35",
        "detail": "Python.working_games.cannon",
        "documentation": {}
    },
    {
        "label": "ball",
        "kind": 5,
        "importPath": "Python.working_games.cannon",
        "description": "Python.working_games.cannon",
        "peekOfCode": "ball = vector(-200, -200)\nspeed = vector(0, 0)\ntargets = []\ndef tap(x, y):\n    \"\"\"Respond to screen tap.\"\"\"\n    if not inside(ball):\n        ball.x = -199\n        ball.y = -199\n        speed.x = (x + 200) / 25\n        speed.y = (y + 200) / 25",
        "detail": "Python.working_games.cannon",
        "documentation": {}
    },
    {
        "label": "speed",
        "kind": 5,
        "importPath": "Python.working_games.cannon",
        "description": "Python.working_games.cannon",
        "peekOfCode": "speed = vector(0, 0)\ntargets = []\ndef tap(x, y):\n    \"\"\"Respond to screen tap.\"\"\"\n    if not inside(ball):\n        ball.x = -199\n        ball.y = -199\n        speed.x = (x + 200) / 25\n        speed.y = (y + 200) / 25\ndef inside(xy):",
        "detail": "Python.working_games.cannon",
        "documentation": {}
    },
    {
        "label": "targets",
        "kind": 5,
        "importPath": "Python.working_games.cannon",
        "description": "Python.working_games.cannon",
        "peekOfCode": "targets = []\ndef tap(x, y):\n    \"\"\"Respond to screen tap.\"\"\"\n    if not inside(ball):\n        ball.x = -199\n        ball.y = -199\n        speed.x = (x + 200) / 25\n        speed.y = (y + 200) / 25\ndef inside(xy):\n    \"\"\"Return True if xy within screen.\"\"\"",
        "detail": "Python.working_games.cannon",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 2,
        "importPath": "Python.working_games.connect",
        "description": "Python.working_games.connect",
        "peekOfCode": "def grid():\n    \"\"\"Draw Connect Four grid.\"\"\"\n    bgcolor('light blue')\n    for x in range(-150, 200, 50):\n        line(x, -200, x, 200)\n    for x in range(-175, 200, 50):\n        for y in range(-175, 200, 50):\n            up()\n            goto(x, y)\n            dot(40, 'white')",
        "detail": "Python.working_games.connect",
        "documentation": {}
    },
    {
        "label": "tap",
        "kind": 2,
        "importPath": "Python.working_games.connect",
        "description": "Python.working_games.connect",
        "peekOfCode": "def tap(x, y):\n    \"\"\"Draw red or yellow circle in tapped row.\"\"\"\n    player = state['player']\n    rows = state['rows']\n    row = int((x + 200) // 50)\n    count = rows[row]\n    x = ((x + 200) // 50) * 50 - 200 + 25\n    y = count * 50 - 200 + 25\n    up()\n    goto(x, y)",
        "detail": "Python.working_games.connect",
        "documentation": {}
    },
    {
        "label": "turns",
        "kind": 5,
        "importPath": "Python.working_games.connect",
        "description": "Python.working_games.connect",
        "peekOfCode": "turns = {'red': 'yellow', 'yellow': 'red'}\nstate = {'player': 'yellow', 'rows': [0] * 8}\ndef grid():\n    \"\"\"Draw Connect Four grid.\"\"\"\n    bgcolor('light blue')\n    for x in range(-150, 200, 50):\n        line(x, -200, x, 200)\n    for x in range(-175, 200, 50):\n        for y in range(-175, 200, 50):\n            up()",
        "detail": "Python.working_games.connect",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "Python.working_games.connect",
        "description": "Python.working_games.connect",
        "peekOfCode": "state = {'player': 'yellow', 'rows': [0] * 8}\ndef grid():\n    \"\"\"Draw Connect Four grid.\"\"\"\n    bgcolor('light blue')\n    for x in range(-150, 200, 50):\n        line(x, -200, x, 200)\n    for x in range(-175, 200, 50):\n        for y in range(-175, 200, 50):\n            up()\n            goto(x, y)",
        "detail": "Python.working_games.connect",
        "documentation": {}
    },
    {
        "label": "encrypt",
        "kind": 2,
        "importPath": "Python.working_games.crypto",
        "description": "Python.working_games.crypto",
        "peekOfCode": "def encrypt(message, key):\n    \"\"\"Encrypt message with key.\"\"\"\n    result = ''\n    # Iterate letters in message and encrypt each individually.\n    for letter in message:\n        if letter.isalpha():\n            # Letters are numbered like so:\n            # A, B, C - Z is 65, 66, 67 - 90\n            # a, b, c - z is 97, 98, 99 - 122\n            num = ord(letter)",
        "detail": "Python.working_games.crypto",
        "documentation": {}
    },
    {
        "label": "decrypt",
        "kind": 2,
        "importPath": "Python.working_games.crypto",
        "description": "Python.working_games.crypto",
        "peekOfCode": "def decrypt(message, key):\n    \"\"\"Decrypt message with key.\"\"\"\n    return encrypt(message, -key)\ndef decode(message):\n    \"\"\"Decode message without key.\"\"\"\n    pass  # TODO\ndef get_key():\n    \"\"\"Get key from user.\"\"\"\n    try:\n        text = input('Enter a key (1 - 25): ')",
        "detail": "Python.working_games.crypto",
        "documentation": {}
    },
    {
        "label": "decode",
        "kind": 2,
        "importPath": "Python.working_games.crypto",
        "description": "Python.working_games.crypto",
        "peekOfCode": "def decode(message):\n    \"\"\"Decode message without key.\"\"\"\n    pass  # TODO\ndef get_key():\n    \"\"\"Get key from user.\"\"\"\n    try:\n        text = input('Enter a key (1 - 25): ')\n        key = int(text)\n        return key\n    except:",
        "detail": "Python.working_games.crypto",
        "documentation": {}
    },
    {
        "label": "get_key",
        "kind": 2,
        "importPath": "Python.working_games.crypto",
        "description": "Python.working_games.crypto",
        "peekOfCode": "def get_key():\n    \"\"\"Get key from user.\"\"\"\n    try:\n        text = input('Enter a key (1 - 25): ')\n        key = int(text)\n        return key\n    except:\n        print('Invalid key. Using key: 0.')\n        return 0\nprint('Do you wish to encrypt, decrypt, or decode a message?')",
        "detail": "Python.working_games.crypto",
        "documentation": {}
    },
    {
        "label": "choice",
        "kind": 5,
        "importPath": "Python.working_games.crypto",
        "description": "Python.working_games.crypto",
        "peekOfCode": "choice = input()\nif choice == 'encrypt':\n    phrase = input('Message: ')\n    code = get_key()\n    print('Encrypted message:', encrypt(phrase, code))\nelif choice == 'decrypt':\n    phrase = input('Message: ')\n    code = get_key()\n    print('Decrypted message:', decrypt(phrase, code))\nelif choice == 'decode':",
        "detail": "Python.working_games.crypto",
        "documentation": {}
    },
    {
        "label": "spinner",
        "kind": 2,
        "importPath": "Python.working_games.fidget",
        "description": "Python.working_games.fidget",
        "peekOfCode": "def spinner():\n    \"\"\"Draw fidget spinner.\"\"\"\n    clear()\n    angle = state['turn'] / 10\n    right(angle)\n    forward(100)\n    dot(120, 'red')\n    back(100)\n    right(120)\n    forward(100)",
        "detail": "Python.working_games.fidget",
        "documentation": {}
    },
    {
        "label": "animate",
        "kind": 2,
        "importPath": "Python.working_games.fidget",
        "description": "Python.working_games.fidget",
        "peekOfCode": "def animate():\n    \"\"\"Animate fidget spinner.\"\"\"\n    if state['turn'] > 0:\n        state['turn'] -= 1\n    spinner()\n    ontimer(animate, 20)\ndef flick():\n    \"\"\"Flick fidget spinner.\"\"\"\n    state['turn'] += 10\nsetup(420, 420, 370, 0)",
        "detail": "Python.working_games.fidget",
        "documentation": {}
    },
    {
        "label": "flick",
        "kind": 2,
        "importPath": "Python.working_games.fidget",
        "description": "Python.working_games.fidget",
        "peekOfCode": "def flick():\n    \"\"\"Flick fidget spinner.\"\"\"\n    state['turn'] += 10\nsetup(420, 420, 370, 0)\nhideturtle()\ntracer(False)\nwidth(20)\nonkey(flick, 'space')\nlisten()\nanimate()",
        "detail": "Python.working_games.fidget",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "Python.working_games.fidget",
        "description": "Python.working_games.fidget",
        "peekOfCode": "state = {'turn': 0}\ndef spinner():\n    \"\"\"Draw fidget spinner.\"\"\"\n    clear()\n    angle = state['turn'] / 10\n    right(angle)\n    forward(100)\n    dot(120, 'red')\n    back(100)\n    right(120)",
        "detail": "Python.working_games.fidget",
        "documentation": {}
    },
    {
        "label": "tap",
        "kind": 2,
        "importPath": "Python.working_games.flappy",
        "description": "Python.working_games.flappy",
        "peekOfCode": "def tap(x, y):\n    \"\"\"Move bird up in response to screen tap.\"\"\"\n    up = vector(0, 30)\n    bird.move(up)\ndef inside(point):\n    \"\"\"Return True if point on screen.\"\"\"\n    return -200 < point.x < 200 and -200 < point.y < 200\ndef draw(alive):\n    \"\"\"Draw screen objects.\"\"\"\n    clear()",
        "detail": "Python.working_games.flappy",
        "documentation": {}
    },
    {
        "label": "inside",
        "kind": 2,
        "importPath": "Python.working_games.flappy",
        "description": "Python.working_games.flappy",
        "peekOfCode": "def inside(point):\n    \"\"\"Return True if point on screen.\"\"\"\n    return -200 < point.x < 200 and -200 < point.y < 200\ndef draw(alive):\n    \"\"\"Draw screen objects.\"\"\"\n    clear()\n    goto(bird.x, bird.y)\n    if alive:\n        dot(10, 'green')\n    else:",
        "detail": "Python.working_games.flappy",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "Python.working_games.flappy",
        "description": "Python.working_games.flappy",
        "peekOfCode": "def draw(alive):\n    \"\"\"Draw screen objects.\"\"\"\n    clear()\n    goto(bird.x, bird.y)\n    if alive:\n        dot(10, 'green')\n    else:\n        dot(10, 'red')\n    for ball in balls:\n        goto(ball.x, ball.y)",
        "detail": "Python.working_games.flappy",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "Python.working_games.flappy",
        "description": "Python.working_games.flappy",
        "peekOfCode": "def move():\n    \"\"\"Update object positions.\"\"\"\n    bird.y -= 5\n    for ball in balls:\n        ball.x -= 3\n    if randrange(10) == 0:\n        y = randrange(-199, 199)\n        ball = vector(199, y)\n        balls.append(ball)\n    while len(balls) > 0 and not inside(balls[0]):",
        "detail": "Python.working_games.flappy",
        "documentation": {}
    },
    {
        "label": "bird",
        "kind": 5,
        "importPath": "Python.working_games.flappy",
        "description": "Python.working_games.flappy",
        "peekOfCode": "bird = vector(0, 0)\nballs = []\ndef tap(x, y):\n    \"\"\"Move bird up in response to screen tap.\"\"\"\n    up = vector(0, 30)\n    bird.move(up)\ndef inside(point):\n    \"\"\"Return True if point on screen.\"\"\"\n    return -200 < point.x < 200 and -200 < point.y < 200\ndef draw(alive):",
        "detail": "Python.working_games.flappy",
        "documentation": {}
    },
    {
        "label": "balls",
        "kind": 5,
        "importPath": "Python.working_games.flappy",
        "description": "Python.working_games.flappy",
        "peekOfCode": "balls = []\ndef tap(x, y):\n    \"\"\"Move bird up in response to screen tap.\"\"\"\n    up = vector(0, 30)\n    bird.move(up)\ndef inside(point):\n    \"\"\"Return True if point on screen.\"\"\"\n    return -200 < point.x < 200 and -200 < point.y < 200\ndef draw(alive):\n    \"\"\"Draw screen objects.\"\"\"",
        "detail": "Python.working_games.flappy",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "Python.working_games.guess",
        "description": "Python.working_games.guess",
        "peekOfCode": "start = 1\nend = 100\nvalue = randint(start, end)\n# print(value)\nprint(\"I'm thinking of a number between\", start, 'and', end)\nguess = None\nwhile guess != value:\n    text = input('Guess the number: ')\n    guess = int(text)\n    if guess < value:",
        "detail": "Python.working_games.guess",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "Python.working_games.guess",
        "description": "Python.working_games.guess",
        "peekOfCode": "end = 100\nvalue = randint(start, end)\n# print(value)\nprint(\"I'm thinking of a number between\", start, 'and', end)\nguess = None\nwhile guess != value:\n    text = input('Guess the number: ')\n    guess = int(text)\n    if guess < value:\n        print('Higher.')",
        "detail": "Python.working_games.guess",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "Python.working_games.guess",
        "description": "Python.working_games.guess",
        "peekOfCode": "value = randint(start, end)\n# print(value)\nprint(\"I'm thinking of a number between\", start, 'and', end)\nguess = None\nwhile guess != value:\n    text = input('Guess the number: ')\n    guess = int(text)\n    if guess < value:\n        print('Higher.')\n    elif guess > value:",
        "detail": "Python.working_games.guess",
        "documentation": {}
    },
    {
        "label": "guess",
        "kind": 5,
        "importPath": "Python.working_games.guess",
        "description": "Python.working_games.guess",
        "peekOfCode": "guess = None\nwhile guess != value:\n    text = input('Guess the number: ')\n    guess = int(text)\n    if guess < value:\n        print('Higher.')\n    elif guess > value:\n        print('Lower.')\nprint('Congratulations! You guessed the right answer:', value)",
        "detail": "Python.working_games.guess",
        "documentation": {}
    },
    {
        "label": "draw_row",
        "kind": 2,
        "importPath": "Python.working_games.illusion",
        "description": "Python.working_games.illusion",
        "peekOfCode": "def draw_row(x, y):\n    for i in range(0, 10):\n        offset = x + (i * size * 2)\n        square(offset, y, size, 'black')\ndef draw_rows():\n    offsets = [-200, -190, -180, -190]\n    pairs = zip(cycle(offsets), range(150, -176, -25))\n    for offset, y in pairs:\n        draw_row(offset, y)\ndef draw_lines():",
        "detail": "Python.working_games.illusion",
        "documentation": {}
    },
    {
        "label": "draw_rows",
        "kind": 2,
        "importPath": "Python.working_games.illusion",
        "description": "Python.working_games.illusion",
        "peekOfCode": "def draw_rows():\n    offsets = [-200, -190, -180, -190]\n    pairs = zip(cycle(offsets), range(150, -176, -25))\n    for offset, y in pairs:\n        draw_row(offset, y)\ndef draw_lines():\n    x = -200\n    y = 150\n    for i in range(0, 14):\n        line(x, y - i * size, x + 16 * size, y - i * size)",
        "detail": "Python.working_games.illusion",
        "documentation": {}
    },
    {
        "label": "draw_lines",
        "kind": 2,
        "importPath": "Python.working_games.illusion",
        "description": "Python.working_games.illusion",
        "peekOfCode": "def draw_lines():\n    x = -200\n    y = 150\n    for i in range(0, 14):\n        line(x, y - i * size, x + 16 * size, y - i * size)\nsetup(420, 400, 30, 0)\nhideturtle()\ntracer(False)\nlisten()\ndraw_rows()",
        "detail": "Python.working_games.illusion",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "Python.working_games.illusion",
        "description": "Python.working_games.illusion",
        "peekOfCode": "size = 25\ndef draw_row(x, y):\n    for i in range(0, 10):\n        offset = x + (i * size * 2)\n        square(offset, y, size, 'black')\ndef draw_rows():\n    offsets = [-200, -190, -180, -190]\n    pairs = zip(cycle(offsets), range(150, -176, -25))\n    for offset, y in pairs:\n        draw_row(offset, y)",
        "detail": "Python.working_games.illusion",
        "documentation": {}
    },
    {
        "label": "initialize",
        "kind": 2,
        "importPath": "Python.working_games.life",
        "description": "Python.working_games.life",
        "peekOfCode": "def initialize():\n    \"\"\"Randomly initialize the cells.\"\"\"\n    for x in range(-200, 200, 10):\n        for y in range(-200, 200, 10):\n            cells[x, y] = False\n    for x in range(-50, 50, 10):\n        for y in range(-50, 50, 10):\n            cells[x, y] = choice([True, False])\ndef step():\n    \"\"\"Compute one step in the Game of Life.\"\"\"",
        "detail": "Python.working_games.life",
        "documentation": {}
    },
    {
        "label": "step",
        "kind": 2,
        "importPath": "Python.working_games.life",
        "description": "Python.working_games.life",
        "peekOfCode": "def step():\n    \"\"\"Compute one step in the Game of Life.\"\"\"\n    neighbors = {}\n    for x in range(-190, 190, 10):\n        for y in range(-190, 190, 10):\n            count = -cells[x, y]\n            for h in [-10, 0, 10]:\n                for v in [-10, 0, 10]:\n                    count += cells[x + h, y + v]\n            neighbors[x, y] = count",
        "detail": "Python.working_games.life",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "Python.working_games.life",
        "description": "Python.working_games.life",
        "peekOfCode": "def draw():\n    \"\"\"Draw all the squares.\"\"\"\n    step()\n    clear()\n    for (x, y), alive in cells.items():\n        color = 'green' if alive else 'black'\n        square(x, y, 10, color)\n    update()\n    ontimer(draw, 100)\nsetup(420, 420, 370, 0)",
        "detail": "Python.working_games.life",
        "documentation": {}
    },
    {
        "label": "cells",
        "kind": 5,
        "importPath": "Python.working_games.life",
        "description": "Python.working_games.life",
        "peekOfCode": "cells = {}\ndef initialize():\n    \"\"\"Randomly initialize the cells.\"\"\"\n    for x in range(-200, 200, 10):\n        for y in range(-200, 200, 10):\n            cells[x, y] = False\n    for x in range(-50, 50, 10):\n        for y in range(-50, 50, 10):\n            cells[x, y] = choice([True, False])\ndef step():",
        "detail": "Python.working_games.life",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 5,
        "importPath": "Python.working_games.madlibs",
        "description": "Python.working_games.madlibs",
        "peekOfCode": "template = 'The |1| |2| |3| |4| over the |5| |6|.'\nparts = {\n    '1': 'adjective',\n    '2': 'adjective',\n    '3': 'noun',\n    '4': 'verb',\n    '5': 'adjective',\n    '6': 'noun',\n}\nchunks = []",
        "detail": "Python.working_games.madlibs",
        "documentation": {}
    },
    {
        "label": "parts",
        "kind": 5,
        "importPath": "Python.working_games.madlibs",
        "description": "Python.working_games.madlibs",
        "peekOfCode": "parts = {\n    '1': 'adjective',\n    '2': 'adjective',\n    '3': 'noun',\n    '4': 'verb',\n    '5': 'adjective',\n    '6': 'noun',\n}\nchunks = []\nfor chunk in template.split('|'):",
        "detail": "Python.working_games.madlibs",
        "documentation": {}
    },
    {
        "label": "chunks",
        "kind": 5,
        "importPath": "Python.working_games.madlibs",
        "description": "Python.working_games.madlibs",
        "peekOfCode": "chunks = []\nfor chunk in template.split('|'):\n    if chunk in parts:\n        description = parts[chunk]\n        prompt = 'Enter [{}]: '.format(description)\n        word = input(prompt)\n        chunks.append(word)\n    else:\n        chunks.append(chunk)\nprint('=' * 80)",
        "detail": "Python.working_games.madlibs",
        "documentation": {}
    },
    {
        "label": "story",
        "kind": 5,
        "importPath": "Python.working_games.madlibs",
        "description": "Python.working_games.madlibs",
        "peekOfCode": "story = ''.join(chunks)\nprint(story)",
        "detail": "Python.working_games.madlibs",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "Python.working_games.maze",
        "description": "Python.working_games.maze",
        "peekOfCode": "def draw():\n    \"\"\"Draw maze.\"\"\"\n    color('black')\n    width(5)\n    for x in range(-200, 200, 40):\n        for y in range(-200, 200, 40):\n            if random() > 0.5:\n                line(x, y, x + 40, y + 40)\n            else:\n                line(x, y + 40, x + 40, y)",
        "detail": "Python.working_games.maze",
        "documentation": {}
    },
    {
        "label": "tap",
        "kind": 2,
        "importPath": "Python.working_games.maze",
        "description": "Python.working_games.maze",
        "peekOfCode": "def tap(x, y):\n    \"\"\"Draw line and dot for screen tap.\"\"\"\n    if abs(x) > 198 or abs(y) > 198:\n        up()\n    else:\n        down()\n    width(2)\n    color('red')\n    goto(x, y)\n    dot(4)",
        "detail": "Python.working_games.maze",
        "documentation": {}
    },
    {
        "label": "square",
        "kind": 2,
        "importPath": "Python.working_games.memory",
        "description": "Python.working_games.memory",
        "peekOfCode": "def square(x, y):\n    \"\"\"Draw white square with black outline at (x, y).\"\"\"\n    up()\n    goto(x, y)\n    down()\n    color('black', 'white')\n    begin_fill()\n    for count in range(4):\n        forward(50)\n        left(90)",
        "detail": "Python.working_games.memory",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "Python.working_games.memory",
        "description": "Python.working_games.memory",
        "peekOfCode": "def index(x, y):\n    \"\"\"Convert (x, y) coordinates to tiles index.\"\"\"\n    return int((x + 200) // 50 + ((y + 200) // 50) * 8)\ndef xy(count):\n    \"\"\"Convert tiles count to (x, y) coordinates.\"\"\"\n    return (count % 8) * 50 - 200, (count // 8) * 50 - 200\ndef tap(x, y):\n    \"\"\"Update mark and hidden tiles based on tap.\"\"\"\n    spot = index(x, y)\n    mark = state['mark']",
        "detail": "Python.working_games.memory",
        "documentation": {}
    },
    {
        "label": "xy",
        "kind": 2,
        "importPath": "Python.working_games.memory",
        "description": "Python.working_games.memory",
        "peekOfCode": "def xy(count):\n    \"\"\"Convert tiles count to (x, y) coordinates.\"\"\"\n    return (count % 8) * 50 - 200, (count // 8) * 50 - 200\ndef tap(x, y):\n    \"\"\"Update mark and hidden tiles based on tap.\"\"\"\n    spot = index(x, y)\n    mark = state['mark']\n    if mark is None or mark == spot or tiles[mark] != tiles[spot]:\n        state['mark'] = spot\n    else:",
        "detail": "Python.working_games.memory",
        "documentation": {}
    },
    {
        "label": "tap",
        "kind": 2,
        "importPath": "Python.working_games.memory",
        "description": "Python.working_games.memory",
        "peekOfCode": "def tap(x, y):\n    \"\"\"Update mark and hidden tiles based on tap.\"\"\"\n    spot = index(x, y)\n    mark = state['mark']\n    if mark is None or mark == spot or tiles[mark] != tiles[spot]:\n        state['mark'] = spot\n    else:\n        hide[spot] = False\n        hide[mark] = False\n        state['mark'] = None",
        "detail": "Python.working_games.memory",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "Python.working_games.memory",
        "description": "Python.working_games.memory",
        "peekOfCode": "def draw():\n    \"\"\"Draw image and tiles.\"\"\"\n    clear()\n    goto(0, 0)\n    shape(car)\n    stamp()\n    for count in range(64):\n        if hide[count]:\n            x, y = xy(count)\n            square(x, y)",
        "detail": "Python.working_games.memory",
        "documentation": {}
    },
    {
        "label": "car",
        "kind": 5,
        "importPath": "Python.working_games.memory",
        "description": "Python.working_games.memory",
        "peekOfCode": "car = path('car.gif')\ntiles = list(range(32)) * 2\nstate = {'mark': None}\nhide = [True] * 64\ndef square(x, y):\n    \"\"\"Draw white square with black outline at (x, y).\"\"\"\n    up()\n    goto(x, y)\n    down()\n    color('black', 'white')",
        "detail": "Python.working_games.memory",
        "documentation": {}
    },
    {
        "label": "tiles",
        "kind": 5,
        "importPath": "Python.working_games.memory",
        "description": "Python.working_games.memory",
        "peekOfCode": "tiles = list(range(32)) * 2\nstate = {'mark': None}\nhide = [True] * 64\ndef square(x, y):\n    \"\"\"Draw white square with black outline at (x, y).\"\"\"\n    up()\n    goto(x, y)\n    down()\n    color('black', 'white')\n    begin_fill()",
        "detail": "Python.working_games.memory",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "Python.working_games.memory",
        "description": "Python.working_games.memory",
        "peekOfCode": "state = {'mark': None}\nhide = [True] * 64\ndef square(x, y):\n    \"\"\"Draw white square with black outline at (x, y).\"\"\"\n    up()\n    goto(x, y)\n    down()\n    color('black', 'white')\n    begin_fill()\n    for count in range(4):",
        "detail": "Python.working_games.memory",
        "documentation": {}
    },
    {
        "label": "hide",
        "kind": 5,
        "importPath": "Python.working_games.memory",
        "description": "Python.working_games.memory",
        "peekOfCode": "hide = [True] * 64\ndef square(x, y):\n    \"\"\"Draw white square with black outline at (x, y).\"\"\"\n    up()\n    goto(x, y)\n    down()\n    color('black', 'white')\n    begin_fill()\n    for count in range(4):\n        forward(50)",
        "detail": "Python.working_games.memory",
        "documentation": {}
    },
    {
        "label": "initialize",
        "kind": 2,
        "importPath": "Python.working_games.minesweeper",
        "description": "Python.working_games.minesweeper",
        "peekOfCode": "def initialize():\n    \"\"\"Initialize `bombs`, `counts`, and `shown` grids.\"\"\"\n    for x in range(-250, 250, 50):\n        for y in range(-250, 250, 50):\n            bombs[x, y] = False\n            shown[x, y] = False\n            counts[x, y] = -1\n    for count in range(8):\n        x = randrange(-200, 200, 50)\n        y = randrange(-200, 200, 50)",
        "detail": "Python.working_games.minesweeper",
        "documentation": {}
    },
    {
        "label": "stamp",
        "kind": 2,
        "importPath": "Python.working_games.minesweeper",
        "description": "Python.working_games.minesweeper",
        "peekOfCode": "def stamp(x, y, text):\n    \"\"\"Display `text` at coordinates `x` and `y`.\"\"\"\n    square(x, y, 50, 'white')\n    color('black')\n    write(text, font=('Arial', 50, 'normal'))\ndef draw():\n    \"\"\"Draw the initial board grid.\"\"\"\n    for x in range(-200, 200, 50):\n        for y in range(-200, 200, 50):\n            stamp(x, y, '?')",
        "detail": "Python.working_games.minesweeper",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "Python.working_games.minesweeper",
        "description": "Python.working_games.minesweeper",
        "peekOfCode": "def draw():\n    \"\"\"Draw the initial board grid.\"\"\"\n    for x in range(-200, 200, 50):\n        for y in range(-200, 200, 50):\n            stamp(x, y, '?')\ndef end():\n    \"\"\"Draw the bombs as X's on the grid.\"\"\"\n    for x in range(-200, 200, 50):\n        for y in range(-200, 200, 50):\n            if bombs[x, y]:",
        "detail": "Python.working_games.minesweeper",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 2,
        "importPath": "Python.working_games.minesweeper",
        "description": "Python.working_games.minesweeper",
        "peekOfCode": "def end():\n    \"\"\"Draw the bombs as X's on the grid.\"\"\"\n    for x in range(-200, 200, 50):\n        for y in range(-200, 200, 50):\n            if bombs[x, y]:\n                stamp(x, y, 'X')\ndef tap(x, y):\n    \"\"\"Respond to screen click at `x` and `y` coordinates.\"\"\"\n    x = floor(x, 50)\n    y = floor(y, 50)",
        "detail": "Python.working_games.minesweeper",
        "documentation": {}
    },
    {
        "label": "tap",
        "kind": 2,
        "importPath": "Python.working_games.minesweeper",
        "description": "Python.working_games.minesweeper",
        "peekOfCode": "def tap(x, y):\n    \"\"\"Respond to screen click at `x` and `y` coordinates.\"\"\"\n    x = floor(x, 50)\n    y = floor(y, 50)\n    if bombs[x, y]:\n        end()\n        return\n    pairs = [(x, y)]\n    while pairs:\n        x, y = pairs.pop()",
        "detail": "Python.working_games.minesweeper",
        "documentation": {}
    },
    {
        "label": "bombs",
        "kind": 5,
        "importPath": "Python.working_games.minesweeper",
        "description": "Python.working_games.minesweeper",
        "peekOfCode": "bombs = {}\nshown = {}\ncounts = {}\ndef initialize():\n    \"\"\"Initialize `bombs`, `counts`, and `shown` grids.\"\"\"\n    for x in range(-250, 250, 50):\n        for y in range(-250, 250, 50):\n            bombs[x, y] = False\n            shown[x, y] = False\n            counts[x, y] = -1",
        "detail": "Python.working_games.minesweeper",
        "documentation": {}
    },
    {
        "label": "shown",
        "kind": 5,
        "importPath": "Python.working_games.minesweeper",
        "description": "Python.working_games.minesweeper",
        "peekOfCode": "shown = {}\ncounts = {}\ndef initialize():\n    \"\"\"Initialize `bombs`, `counts`, and `shown` grids.\"\"\"\n    for x in range(-250, 250, 50):\n        for y in range(-250, 250, 50):\n            bombs[x, y] = False\n            shown[x, y] = False\n            counts[x, y] = -1\n    for count in range(8):",
        "detail": "Python.working_games.minesweeper",
        "documentation": {}
    },
    {
        "label": "counts",
        "kind": 5,
        "importPath": "Python.working_games.minesweeper",
        "description": "Python.working_games.minesweeper",
        "peekOfCode": "counts = {}\ndef initialize():\n    \"\"\"Initialize `bombs`, `counts`, and `shown` grids.\"\"\"\n    for x in range(-250, 250, 50):\n        for y in range(-250, 250, 50):\n            bombs[x, y] = False\n            shown[x, y] = False\n            counts[x, y] = -1\n    for count in range(8):\n        x = randrange(-200, 200, 50)",
        "detail": "Python.working_games.minesweeper",
        "documentation": {}
    },
    {
        "label": "square",
        "kind": 2,
        "importPath": "Python.working_games.pacman",
        "description": "Python.working_games.pacman",
        "peekOfCode": "def square(x, y):\n    \"\"\"Draw square using path at (x, y).\"\"\"\n    path.up()\n    path.goto(x, y)\n    path.down()\n    path.begin_fill()\n    for count in range(4):\n        path.forward(20)\n        path.left(90)\n    path.end_fill()",
        "detail": "Python.working_games.pacman",
        "documentation": {}
    },
    {
        "label": "offset",
        "kind": 2,
        "importPath": "Python.working_games.pacman",
        "description": "Python.working_games.pacman",
        "peekOfCode": "def offset(point):\n    \"\"\"Return offset of point in tiles.\"\"\"\n    x = (floor(point.x, 20) + 200) / 20\n    y = (180 - floor(point.y, 20)) / 20\n    index = int(x + y * 20)\n    return index\ndef valid(point):\n    \"\"\"Return True if point is valid in tiles.\"\"\"\n    index = offset(point)\n    if tiles[index] == 0:",
        "detail": "Python.working_games.pacman",
        "documentation": {}
    },
    {
        "label": "valid",
        "kind": 2,
        "importPath": "Python.working_games.pacman",
        "description": "Python.working_games.pacman",
        "peekOfCode": "def valid(point):\n    \"\"\"Return True if point is valid in tiles.\"\"\"\n    index = offset(point)\n    if tiles[index] == 0:\n        return False\n    index = offset(point + 19)\n    if tiles[index] == 0:\n        return False\n    return point.x % 20 == 0 or point.y % 20 == 0\ndef world():",
        "detail": "Python.working_games.pacman",
        "documentation": {}
    },
    {
        "label": "world",
        "kind": 2,
        "importPath": "Python.working_games.pacman",
        "description": "Python.working_games.pacman",
        "peekOfCode": "def world():\n    \"\"\"Draw world using path.\"\"\"\n    bgcolor('black')\n    path.color('blue')\n    for index in range(len(tiles)):\n        tile = tiles[index]\n        if tile > 0:\n            x = (index % 20) * 20 - 200\n            y = 180 - (index // 20) * 20\n            square(x, y)",
        "detail": "Python.working_games.pacman",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "Python.working_games.pacman",
        "description": "Python.working_games.pacman",
        "peekOfCode": "def move():\n    \"\"\"Move pacman and all ghosts.\"\"\"\n    writer.undo()\n    writer.write(state['score'])\n    clear()\n    if valid(pacman + aim):\n        pacman.move(aim)\n    index = offset(pacman)\n    if tiles[index] == 1:\n        tiles[index] = 2",
        "detail": "Python.working_games.pacman",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "Python.working_games.pacman",
        "description": "Python.working_games.pacman",
        "peekOfCode": "def change(x, y):\n    \"\"\"Change pacman aim if valid.\"\"\"\n    if valid(pacman + vector(x, y)):\n        aim.x = x\n        aim.y = y\nsetup(420, 420, 370, 0)\nhideturtle()\ntracer(False)\nwriter.goto(160, 160)\nwriter.color('white')",
        "detail": "Python.working_games.pacman",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "Python.working_games.pacman",
        "description": "Python.working_games.pacman",
        "peekOfCode": "state = {'score': 0}\npath = Turtle(visible=False)\nwriter = Turtle(visible=False)\naim = vector(5, 0)\npacman = vector(-40, -80)\nghosts = [\n    [vector(-180, 160), vector(5, 0)],\n    [vector(-180, -160), vector(0, 5)],\n    [vector(100, 160), vector(0, -5)],\n    [vector(100, -160), vector(-5, 0)],",
        "detail": "Python.working_games.pacman",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "Python.working_games.pacman",
        "description": "Python.working_games.pacman",
        "peekOfCode": "path = Turtle(visible=False)\nwriter = Turtle(visible=False)\naim = vector(5, 0)\npacman = vector(-40, -80)\nghosts = [\n    [vector(-180, 160), vector(5, 0)],\n    [vector(-180, -160), vector(0, 5)],\n    [vector(100, 160), vector(0, -5)],\n    [vector(100, -160), vector(-5, 0)],\n]",
        "detail": "Python.working_games.pacman",
        "documentation": {}
    },
    {
        "label": "writer",
        "kind": 5,
        "importPath": "Python.working_games.pacman",
        "description": "Python.working_games.pacman",
        "peekOfCode": "writer = Turtle(visible=False)\naim = vector(5, 0)\npacman = vector(-40, -80)\nghosts = [\n    [vector(-180, 160), vector(5, 0)],\n    [vector(-180, -160), vector(0, 5)],\n    [vector(100, 160), vector(0, -5)],\n    [vector(100, -160), vector(-5, 0)],\n]\n# fmt: off",
        "detail": "Python.working_games.pacman",
        "documentation": {}
    },
    {
        "label": "aim",
        "kind": 5,
        "importPath": "Python.working_games.pacman",
        "description": "Python.working_games.pacman",
        "peekOfCode": "aim = vector(5, 0)\npacman = vector(-40, -80)\nghosts = [\n    [vector(-180, 160), vector(5, 0)],\n    [vector(-180, -160), vector(0, 5)],\n    [vector(100, 160), vector(0, -5)],\n    [vector(100, -160), vector(-5, 0)],\n]\n# fmt: off\ntiles = [",
        "detail": "Python.working_games.pacman",
        "documentation": {}
    },
    {
        "label": "pacman",
        "kind": 5,
        "importPath": "Python.working_games.pacman",
        "description": "Python.working_games.pacman",
        "peekOfCode": "pacman = vector(-40, -80)\nghosts = [\n    [vector(-180, 160), vector(5, 0)],\n    [vector(-180, -160), vector(0, 5)],\n    [vector(100, 160), vector(0, -5)],\n    [vector(100, -160), vector(-5, 0)],\n]\n# fmt: off\ntiles = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,",
        "detail": "Python.working_games.pacman",
        "documentation": {}
    },
    {
        "label": "ghosts",
        "kind": 5,
        "importPath": "Python.working_games.pacman",
        "description": "Python.working_games.pacman",
        "peekOfCode": "ghosts = [\n    [vector(-180, 160), vector(5, 0)],\n    [vector(-180, -160), vector(0, 5)],\n    [vector(100, 160), vector(0, -5)],\n    [vector(100, -160), vector(-5, 0)],\n]\n# fmt: off\ntiles = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,",
        "detail": "Python.working_games.pacman",
        "documentation": {}
    },
    {
        "label": "tiles",
        "kind": 5,
        "importPath": "Python.working_games.pacman",
        "description": "Python.working_games.pacman",
        "peekOfCode": "tiles = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,\n    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,\n    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,\n    0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,\n    0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,\n    0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n    0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n    0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,",
        "detail": "Python.working_games.pacman",
        "documentation": {}
    },
    {
        "label": "line",
        "kind": 2,
        "importPath": "Python.working_games.paint",
        "description": "Python.working_games.paint",
        "peekOfCode": "def line(start, end):\n    \"\"\"Draw line from start to end.\"\"\"\n    up()\n    goto(start.x, start.y)\n    down()\n    goto(end.x, end.y)\ndef square(start, end):\n    \"\"\"Draw square from start to end.\"\"\"\n    up()\n    goto(start.x, start.y)",
        "detail": "Python.working_games.paint",
        "documentation": {}
    },
    {
        "label": "square",
        "kind": 2,
        "importPath": "Python.working_games.paint",
        "description": "Python.working_games.paint",
        "peekOfCode": "def square(start, end):\n    \"\"\"Draw square from start to end.\"\"\"\n    up()\n    goto(start.x, start.y)\n    down()\n    begin_fill()\n    for count in range(4):\n        forward(end.x - start.x)\n        left(90)\n    end_fill()",
        "detail": "Python.working_games.paint",
        "documentation": {}
    },
    {
        "label": "circle",
        "kind": 2,
        "importPath": "Python.working_games.paint",
        "description": "Python.working_games.paint",
        "peekOfCode": "def circle(start, end):\n    \"\"\"Draw circle from start to end.\"\"\"\n    pass  # TODO\ndef rectangle(start, end):\n    \"\"\"Draw rectangle from start to end.\"\"\"\n    pass  # TODO\ndef triangle(start, end):\n    \"\"\"Draw triangle from start to end.\"\"\"\n    pass  # TODO\ndef tap(x, y):",
        "detail": "Python.working_games.paint",
        "documentation": {}
    },
    {
        "label": "rectangle",
        "kind": 2,
        "importPath": "Python.working_games.paint",
        "description": "Python.working_games.paint",
        "peekOfCode": "def rectangle(start, end):\n    \"\"\"Draw rectangle from start to end.\"\"\"\n    pass  # TODO\ndef triangle(start, end):\n    \"\"\"Draw triangle from start to end.\"\"\"\n    pass  # TODO\ndef tap(x, y):\n    \"\"\"Store starting point or draw shape.\"\"\"\n    start = state['start']\n    if start is None:",
        "detail": "Python.working_games.paint",
        "documentation": {}
    },
    {
        "label": "triangle",
        "kind": 2,
        "importPath": "Python.working_games.paint",
        "description": "Python.working_games.paint",
        "peekOfCode": "def triangle(start, end):\n    \"\"\"Draw triangle from start to end.\"\"\"\n    pass  # TODO\ndef tap(x, y):\n    \"\"\"Store starting point or draw shape.\"\"\"\n    start = state['start']\n    if start is None:\n        state['start'] = vector(x, y)\n    else:\n        shape = state['shape']",
        "detail": "Python.working_games.paint",
        "documentation": {}
    },
    {
        "label": "tap",
        "kind": 2,
        "importPath": "Python.working_games.paint",
        "description": "Python.working_games.paint",
        "peekOfCode": "def tap(x, y):\n    \"\"\"Store starting point or draw shape.\"\"\"\n    start = state['start']\n    if start is None:\n        state['start'] = vector(x, y)\n    else:\n        shape = state['shape']\n        end = vector(x, y)\n        shape(start, end)\n        state['start'] = None",
        "detail": "Python.working_games.paint",
        "documentation": {}
    },
    {
        "label": "store",
        "kind": 2,
        "importPath": "Python.working_games.paint",
        "description": "Python.working_games.paint",
        "peekOfCode": "def store(key, value):\n    \"\"\"Store value in state at key.\"\"\"\n    state[key] = value\nstate = {'start': None, 'shape': line}\nsetup(420, 420, 370, 0)\nonscreenclick(tap)\nlisten()\nonkey(undo, 'u')\nonkey(lambda: color('black'), 'K')\nonkey(lambda: color('white'), 'W')",
        "detail": "Python.working_games.paint",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "Python.working_games.paint",
        "description": "Python.working_games.paint",
        "peekOfCode": "state = {'start': None, 'shape': line}\nsetup(420, 420, 370, 0)\nonscreenclick(tap)\nlisten()\nonkey(undo, 'u')\nonkey(lambda: color('black'), 'K')\nonkey(lambda: color('white'), 'W')\nonkey(lambda: color('green'), 'G')\nonkey(lambda: color('blue'), 'B')\nonkey(lambda: color('red'), 'R')",
        "detail": "Python.working_games.paint",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 2,
        "importPath": "Python.working_games.pong",
        "description": "Python.working_games.pong",
        "peekOfCode": "def value():\n    \"\"\"Randomly generate value between (-5, -3) or (3, 5).\"\"\"\n    return (3 + random() * 2) * choice([1, -1])\nball = vector(0, 0)\naim = vector(value(), value())\nstate = {1: 0, 2: 0}\ndef move(player, change):\n    \"\"\"Move player position by change.\"\"\"\n    state[player] += change\ndef rectangle(x, y, width, height):",
        "detail": "Python.working_games.pong",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "Python.working_games.pong",
        "description": "Python.working_games.pong",
        "peekOfCode": "def move(player, change):\n    \"\"\"Move player position by change.\"\"\"\n    state[player] += change\ndef rectangle(x, y, width, height):\n    \"\"\"Draw rectangle at (x, y) with given width and height.\"\"\"\n    up()\n    goto(x, y)\n    down()\n    begin_fill()\n    for count in range(2):",
        "detail": "Python.working_games.pong",
        "documentation": {}
    },
    {
        "label": "rectangle",
        "kind": 2,
        "importPath": "Python.working_games.pong",
        "description": "Python.working_games.pong",
        "peekOfCode": "def rectangle(x, y, width, height):\n    \"\"\"Draw rectangle at (x, y) with given width and height.\"\"\"\n    up()\n    goto(x, y)\n    down()\n    begin_fill()\n    for count in range(2):\n        forward(width)\n        left(90)\n        forward(height)",
        "detail": "Python.working_games.pong",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "Python.working_games.pong",
        "description": "Python.working_games.pong",
        "peekOfCode": "def draw():\n    \"\"\"Draw game and move pong ball.\"\"\"\n    clear()\n    rectangle(-200, state[1], 10, 50)\n    rectangle(190, state[2], 10, 50)\n    ball.move(aim)\n    x = ball.x\n    y = ball.y\n    up()\n    goto(x, y)",
        "detail": "Python.working_games.pong",
        "documentation": {}
    },
    {
        "label": "ball",
        "kind": 5,
        "importPath": "Python.working_games.pong",
        "description": "Python.working_games.pong",
        "peekOfCode": "ball = vector(0, 0)\naim = vector(value(), value())\nstate = {1: 0, 2: 0}\ndef move(player, change):\n    \"\"\"Move player position by change.\"\"\"\n    state[player] += change\ndef rectangle(x, y, width, height):\n    \"\"\"Draw rectangle at (x, y) with given width and height.\"\"\"\n    up()\n    goto(x, y)",
        "detail": "Python.working_games.pong",
        "documentation": {}
    },
    {
        "label": "aim",
        "kind": 5,
        "importPath": "Python.working_games.pong",
        "description": "Python.working_games.pong",
        "peekOfCode": "aim = vector(value(), value())\nstate = {1: 0, 2: 0}\ndef move(player, change):\n    \"\"\"Move player position by change.\"\"\"\n    state[player] += change\ndef rectangle(x, y, width, height):\n    \"\"\"Draw rectangle at (x, y) with given width and height.\"\"\"\n    up()\n    goto(x, y)\n    down()",
        "detail": "Python.working_games.pong",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "Python.working_games.pong",
        "description": "Python.working_games.pong",
        "peekOfCode": "state = {1: 0, 2: 0}\ndef move(player, change):\n    \"\"\"Move player position by change.\"\"\"\n    state[player] += change\ndef rectangle(x, y, width, height):\n    \"\"\"Draw rectangle at (x, y) with given width and height.\"\"\"\n    up()\n    goto(x, y)\n    down()\n    begin_fill()",
        "detail": "Python.working_games.pong",
        "documentation": {}
    },
    {
        "label": "always_same",
        "kind": 2,
        "importPath": "Python.working_games.rps",
        "description": "Python.working_games.rps",
        "peekOfCode": "def always_same():\n    return default\ndef random_strategy():\n    return random.choice('rps')\ndef beat_last():\n    if not guesses:\n        return default\n    last, _ = guesses[-1]\n    return loses[last]\nstrategies = [always_same, random_strategy, beat_last]",
        "detail": "Python.working_games.rps",
        "documentation": {}
    },
    {
        "label": "random_strategy",
        "kind": 2,
        "importPath": "Python.working_games.rps",
        "description": "Python.working_games.rps",
        "peekOfCode": "def random_strategy():\n    return random.choice('rps')\ndef beat_last():\n    if not guesses:\n        return default\n    last, _ = guesses[-1]\n    return loses[last]\nstrategies = [always_same, random_strategy, beat_last]\nstrategy = random.choice(strategies)\ndef get_option():",
        "detail": "Python.working_games.rps",
        "documentation": {}
    },
    {
        "label": "beat_last",
        "kind": 2,
        "importPath": "Python.working_games.rps",
        "description": "Python.working_games.rps",
        "peekOfCode": "def beat_last():\n    if not guesses:\n        return default\n    last, _ = guesses[-1]\n    return loses[last]\nstrategies = [always_same, random_strategy, beat_last]\nstrategy = random.choice(strategies)\ndef get_option():\n    while True:\n        choice = input('Enter \"r\" for rock, \"p\" for paper, \"s\" for scissors: ')",
        "detail": "Python.working_games.rps",
        "documentation": {}
    },
    {
        "label": "get_option",
        "kind": 2,
        "importPath": "Python.working_games.rps",
        "description": "Python.working_games.rps",
        "peekOfCode": "def get_option():\n    while True:\n        choice = input('Enter \"r\" for rock, \"p\" for paper, \"s\" for scissors: ')\n        if choice not in beats:\n            print('Invalid choice.')\n            continue\n        return choice\nprint(__doc__)\nwhile True:\n    player = get_option()",
        "detail": "Python.working_games.rps",
        "documentation": {}
    },
    {
        "label": "beats",
        "kind": 5,
        "importPath": "Python.working_games.rps",
        "description": "Python.working_games.rps",
        "peekOfCode": "beats = {'r': 's', 'p': 'r', 's': 'p'}\nloses = {value: key for key, value in beats.items()}\nstate = {'player': 0, 'computer': 0, 'ties': 0}\nguesses = []\ndefault = random.choice('rps')\ndef always_same():\n    return default\ndef random_strategy():\n    return random.choice('rps')\ndef beat_last():",
        "detail": "Python.working_games.rps",
        "documentation": {}
    },
    {
        "label": "loses",
        "kind": 5,
        "importPath": "Python.working_games.rps",
        "description": "Python.working_games.rps",
        "peekOfCode": "loses = {value: key for key, value in beats.items()}\nstate = {'player': 0, 'computer': 0, 'ties': 0}\nguesses = []\ndefault = random.choice('rps')\ndef always_same():\n    return default\ndef random_strategy():\n    return random.choice('rps')\ndef beat_last():\n    if not guesses:",
        "detail": "Python.working_games.rps",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "Python.working_games.rps",
        "description": "Python.working_games.rps",
        "peekOfCode": "state = {'player': 0, 'computer': 0, 'ties': 0}\nguesses = []\ndefault = random.choice('rps')\ndef always_same():\n    return default\ndef random_strategy():\n    return random.choice('rps')\ndef beat_last():\n    if not guesses:\n        return default",
        "detail": "Python.working_games.rps",
        "documentation": {}
    },
    {
        "label": "guesses",
        "kind": 5,
        "importPath": "Python.working_games.rps",
        "description": "Python.working_games.rps",
        "peekOfCode": "guesses = []\ndefault = random.choice('rps')\ndef always_same():\n    return default\ndef random_strategy():\n    return random.choice('rps')\ndef beat_last():\n    if not guesses:\n        return default\n    last, _ = guesses[-1]",
        "detail": "Python.working_games.rps",
        "documentation": {}
    },
    {
        "label": "default",
        "kind": 5,
        "importPath": "Python.working_games.rps",
        "description": "Python.working_games.rps",
        "peekOfCode": "default = random.choice('rps')\ndef always_same():\n    return default\ndef random_strategy():\n    return random.choice('rps')\ndef beat_last():\n    if not guesses:\n        return default\n    last, _ = guesses[-1]\n    return loses[last]",
        "detail": "Python.working_games.rps",
        "documentation": {}
    },
    {
        "label": "strategies",
        "kind": 5,
        "importPath": "Python.working_games.rps",
        "description": "Python.working_games.rps",
        "peekOfCode": "strategies = [always_same, random_strategy, beat_last]\nstrategy = random.choice(strategies)\ndef get_option():\n    while True:\n        choice = input('Enter \"r\" for rock, \"p\" for paper, \"s\" for scissors: ')\n        if choice not in beats:\n            print('Invalid choice.')\n            continue\n        return choice\nprint(__doc__)",
        "detail": "Python.working_games.rps",
        "documentation": {}
    },
    {
        "label": "strategy",
        "kind": 5,
        "importPath": "Python.working_games.rps",
        "description": "Python.working_games.rps",
        "peekOfCode": "strategy = random.choice(strategies)\ndef get_option():\n    while True:\n        choice = input('Enter \"r\" for rock, \"p\" for paper, \"s\" for scissors: ')\n        if choice not in beats:\n            print('Invalid choice.')\n            continue\n        return choice\nprint(__doc__)\nwhile True:",
        "detail": "Python.working_games.rps",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 2,
        "importPath": "Python.working_games.simonsays",
        "description": "Python.working_games.simonsays",
        "peekOfCode": "def grid():\n    \"\"\"Draw grid of tiles.\"\"\"\n    square(0, 0, 200, 'dark red')\n    square(0, -200, 200, 'dark blue')\n    square(-200, 0, 200, 'dark green')\n    square(-200, -200, 200, 'khaki')\n    update()\ndef flash(tile):\n    \"\"\"Flash tile in grid.\"\"\"\n    glow, dark = tiles[tile]",
        "detail": "Python.working_games.simonsays",
        "documentation": {}
    },
    {
        "label": "flash",
        "kind": 2,
        "importPath": "Python.working_games.simonsays",
        "description": "Python.working_games.simonsays",
        "peekOfCode": "def flash(tile):\n    \"\"\"Flash tile in grid.\"\"\"\n    glow, dark = tiles[tile]\n    square(tile.x, tile.y, 200, glow)\n    update()\n    sleep(0.5)\n    square(tile.x, tile.y, 200, dark)\n    update()\n    sleep(0.5)\ndef grow():",
        "detail": "Python.working_games.simonsays",
        "documentation": {}
    },
    {
        "label": "grow",
        "kind": 2,
        "importPath": "Python.working_games.simonsays",
        "description": "Python.working_games.simonsays",
        "peekOfCode": "def grow():\n    \"\"\"Grow pattern and flash tiles.\"\"\"\n    tile = choice(list(tiles))\n    pattern.append(tile)\n    for tile in pattern:\n        flash(tile)\n    print('Pattern length:', len(pattern))\n    guesses.clear()\ndef tap(x, y):\n    \"\"\"Respond to screen tap.\"\"\"",
        "detail": "Python.working_games.simonsays",
        "documentation": {}
    },
    {
        "label": "tap",
        "kind": 2,
        "importPath": "Python.working_games.simonsays",
        "description": "Python.working_games.simonsays",
        "peekOfCode": "def tap(x, y):\n    \"\"\"Respond to screen tap.\"\"\"\n    onscreenclick(None)\n    x = floor(x, 200)\n    y = floor(y, 200)\n    tile = vector(x, y)\n    index = len(guesses)\n    if tile != pattern[index]:\n        exit()\n    guesses.append(tile)",
        "detail": "Python.working_games.simonsays",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "Python.working_games.simonsays",
        "description": "Python.working_games.simonsays",
        "peekOfCode": "def start(x, y):\n    \"\"\"Start game.\"\"\"\n    grow()\n    onscreenclick(tap)\nsetup(420, 420, 370, 0)\nhideturtle()\ntracer(False)\ngrid()\nonscreenclick(start)\ndone()",
        "detail": "Python.working_games.simonsays",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 5,
        "importPath": "Python.working_games.simonsays",
        "description": "Python.working_games.simonsays",
        "peekOfCode": "pattern = []\nguesses = []\ntiles = {\n    vector(0, 0): ('red', 'dark red'),\n    vector(0, -200): ('blue', 'dark blue'),\n    vector(-200, 0): ('green', 'dark green'),\n    vector(-200, -200): ('yellow', 'khaki'),\n}\ndef grid():\n    \"\"\"Draw grid of tiles.\"\"\"",
        "detail": "Python.working_games.simonsays",
        "documentation": {}
    },
    {
        "label": "guesses",
        "kind": 5,
        "importPath": "Python.working_games.simonsays",
        "description": "Python.working_games.simonsays",
        "peekOfCode": "guesses = []\ntiles = {\n    vector(0, 0): ('red', 'dark red'),\n    vector(0, -200): ('blue', 'dark blue'),\n    vector(-200, 0): ('green', 'dark green'),\n    vector(-200, -200): ('yellow', 'khaki'),\n}\ndef grid():\n    \"\"\"Draw grid of tiles.\"\"\"\n    square(0, 0, 200, 'dark red')",
        "detail": "Python.working_games.simonsays",
        "documentation": {}
    },
    {
        "label": "tiles",
        "kind": 5,
        "importPath": "Python.working_games.simonsays",
        "description": "Python.working_games.simonsays",
        "peekOfCode": "tiles = {\n    vector(0, 0): ('red', 'dark red'),\n    vector(0, -200): ('blue', 'dark blue'),\n    vector(-200, 0): ('green', 'dark green'),\n    vector(-200, -200): ('yellow', 'khaki'),\n}\ndef grid():\n    \"\"\"Draw grid of tiles.\"\"\"\n    square(0, 0, 200, 'dark red')\n    square(0, -200, 200, 'dark blue')",
        "detail": "Python.working_games.simonsays",
        "documentation": {}
    },
    {
        "label": "change",
        "kind": 2,
        "importPath": "Python.working_games.snake",
        "description": "Python.working_games.snake",
        "peekOfCode": "def change(x, y):\n    \"\"\"Change snake direction.\"\"\"\n    aim.x = x\n    aim.y = y\ndef inside(head):\n    \"\"\"Return True if head inside boundaries.\"\"\"\n    return -200 < head.x < 190 and -200 < head.y < 190\ndef move():\n    \"\"\"Move snake forward one segment.\"\"\"\n    head = snake[-1].copy()",
        "detail": "Python.working_games.snake",
        "documentation": {}
    },
    {
        "label": "inside",
        "kind": 2,
        "importPath": "Python.working_games.snake",
        "description": "Python.working_games.snake",
        "peekOfCode": "def inside(head):\n    \"\"\"Return True if head inside boundaries.\"\"\"\n    return -200 < head.x < 190 and -200 < head.y < 190\ndef move():\n    \"\"\"Move snake forward one segment.\"\"\"\n    head = snake[-1].copy()\n    head.move(aim)\n    if not inside(head) or head in snake:\n        square(head.x, head.y, 9, 'red')\n        update()",
        "detail": "Python.working_games.snake",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "Python.working_games.snake",
        "description": "Python.working_games.snake",
        "peekOfCode": "def move():\n    \"\"\"Move snake forward one segment.\"\"\"\n    head = snake[-1].copy()\n    head.move(aim)\n    if not inside(head) or head in snake:\n        square(head.x, head.y, 9, 'red')\n        update()\n        return\n    snake.append(head)\n    if head == food:",
        "detail": "Python.working_games.snake",
        "documentation": {}
    },
    {
        "label": "food",
        "kind": 5,
        "importPath": "Python.working_games.snake",
        "description": "Python.working_games.snake",
        "peekOfCode": "food = vector(0, 0)\nsnake = [vector(10, 0)]\naim = vector(0, -10)\ndef change(x, y):\n    \"\"\"Change snake direction.\"\"\"\n    aim.x = x\n    aim.y = y\ndef inside(head):\n    \"\"\"Return True if head inside boundaries.\"\"\"\n    return -200 < head.x < 190 and -200 < head.y < 190",
        "detail": "Python.working_games.snake",
        "documentation": {}
    },
    {
        "label": "snake",
        "kind": 5,
        "importPath": "Python.working_games.snake",
        "description": "Python.working_games.snake",
        "peekOfCode": "snake = [vector(10, 0)]\naim = vector(0, -10)\ndef change(x, y):\n    \"\"\"Change snake direction.\"\"\"\n    aim.x = x\n    aim.y = y\ndef inside(head):\n    \"\"\"Return True if head inside boundaries.\"\"\"\n    return -200 < head.x < 190 and -200 < head.y < 190\ndef move():",
        "detail": "Python.working_games.snake",
        "documentation": {}
    },
    {
        "label": "aim",
        "kind": 5,
        "importPath": "Python.working_games.snake",
        "description": "Python.working_games.snake",
        "peekOfCode": "aim = vector(0, -10)\ndef change(x, y):\n    \"\"\"Change snake direction.\"\"\"\n    aim.x = x\n    aim.y = y\ndef inside(head):\n    \"\"\"Return True if head inside boundaries.\"\"\"\n    return -200 < head.x < 190 and -200 < head.y < 190\ndef move():\n    \"\"\"Move snake forward one segment.\"\"\"",
        "detail": "Python.working_games.snake",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 2,
        "importPath": "Python.working_games.tictactoe",
        "description": "Python.working_games.tictactoe",
        "peekOfCode": "def grid():\n    \"\"\"Draw tic-tac-toe grid.\"\"\"\n    line(-67, 200, -67, -200)\n    line(67, 200, 67, -200)\n    line(-200, -67, 200, -67)\n    line(-200, 67, 200, 67)\ndef drawx(x, y):\n    \"\"\"Draw X player.\"\"\"\n    line(x, y, x + 133, y + 133)\n    line(x, y + 133, x + 133, y)",
        "detail": "Python.working_games.tictactoe",
        "documentation": {}
    },
    {
        "label": "drawx",
        "kind": 2,
        "importPath": "Python.working_games.tictactoe",
        "description": "Python.working_games.tictactoe",
        "peekOfCode": "def drawx(x, y):\n    \"\"\"Draw X player.\"\"\"\n    line(x, y, x + 133, y + 133)\n    line(x, y + 133, x + 133, y)\ndef drawo(x, y):\n    \"\"\"Draw O player.\"\"\"\n    up()\n    goto(x + 67, y + 5)\n    down()\n    circle(62)",
        "detail": "Python.working_games.tictactoe",
        "documentation": {}
    },
    {
        "label": "drawo",
        "kind": 2,
        "importPath": "Python.working_games.tictactoe",
        "description": "Python.working_games.tictactoe",
        "peekOfCode": "def drawo(x, y):\n    \"\"\"Draw O player.\"\"\"\n    up()\n    goto(x + 67, y + 5)\n    down()\n    circle(62)\ndef floor(value):\n    \"\"\"Round value down to grid with square size 133.\"\"\"\n    return ((value + 200) // 133) * 133 - 200\nstate = {'player': 0}",
        "detail": "Python.working_games.tictactoe",
        "documentation": {}
    },
    {
        "label": "floor",
        "kind": 2,
        "importPath": "Python.working_games.tictactoe",
        "description": "Python.working_games.tictactoe",
        "peekOfCode": "def floor(value):\n    \"\"\"Round value down to grid with square size 133.\"\"\"\n    return ((value + 200) // 133) * 133 - 200\nstate = {'player': 0}\nplayers = [drawx, drawo]\ndef tap(x, y):\n    \"\"\"Draw X or O in tapped square.\"\"\"\n    x = floor(x)\n    y = floor(y)\n    player = state['player']",
        "detail": "Python.working_games.tictactoe",
        "documentation": {}
    },
    {
        "label": "tap",
        "kind": 2,
        "importPath": "Python.working_games.tictactoe",
        "description": "Python.working_games.tictactoe",
        "peekOfCode": "def tap(x, y):\n    \"\"\"Draw X or O in tapped square.\"\"\"\n    x = floor(x)\n    y = floor(y)\n    player = state['player']\n    draw = players[player]\n    draw(x, y)\n    update()\n    state['player'] = not player\nsetup(420, 420, 370, 0)",
        "detail": "Python.working_games.tictactoe",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "Python.working_games.tictactoe",
        "description": "Python.working_games.tictactoe",
        "peekOfCode": "state = {'player': 0}\nplayers = [drawx, drawo]\ndef tap(x, y):\n    \"\"\"Draw X or O in tapped square.\"\"\"\n    x = floor(x)\n    y = floor(y)\n    player = state['player']\n    draw = players[player]\n    draw(x, y)\n    update()",
        "detail": "Python.working_games.tictactoe",
        "documentation": {}
    },
    {
        "label": "players",
        "kind": 5,
        "importPath": "Python.working_games.tictactoe",
        "description": "Python.working_games.tictactoe",
        "peekOfCode": "players = [drawx, drawo]\ndef tap(x, y):\n    \"\"\"Draw X or O in tapped square.\"\"\"\n    x = floor(x)\n    y = floor(y)\n    player = state['player']\n    draw = players[player]\n    draw(x, y)\n    update()\n    state['player'] = not player",
        "detail": "Python.working_games.tictactoe",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "Python.working_games.tiles",
        "description": "Python.working_games.tiles",
        "peekOfCode": "def load():\n    \"\"\"Load tiles and scramble.\"\"\"\n    count = 1\n    for y in range(-200, 200, 100):\n        for x in range(-200, 200, 100):\n            mark = vector(x, y)\n            tiles[mark] = count\n            count += 1\n    tiles[mark] = None\n    for count in range(1000):",
        "detail": "Python.working_games.tiles",
        "documentation": {}
    },
    {
        "label": "square",
        "kind": 2,
        "importPath": "Python.working_games.tiles",
        "description": "Python.working_games.tiles",
        "peekOfCode": "def square(mark, number):\n    \"\"\"Draw white square with black outline and number.\"\"\"\n    up()\n    goto(mark.x, mark.y)\n    down()\n    color('black', 'white')\n    begin_fill()\n    for count in range(4):\n        forward(99)\n        left(90)",
        "detail": "Python.working_games.tiles",
        "documentation": {}
    },
    {
        "label": "tap",
        "kind": 2,
        "importPath": "Python.working_games.tiles",
        "description": "Python.working_games.tiles",
        "peekOfCode": "def tap(x, y):\n    \"\"\"Swap tile and empty square.\"\"\"\n    x = floor(x, 100)\n    y = floor(y, 100)\n    mark = vector(x, y)\n    for neighbor in neighbors:\n        spot = mark + neighbor\n        if spot in tiles and tiles[spot] is None:\n            number = tiles[mark]\n            tiles[spot] = number",
        "detail": "Python.working_games.tiles",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "Python.working_games.tiles",
        "description": "Python.working_games.tiles",
        "peekOfCode": "def draw():\n    \"\"\"Draw all tiles.\"\"\"\n    for mark in tiles:\n        square(mark, tiles[mark])\n    update()\nsetup(420, 420, 370, 0)\nhideturtle()\ntracer(False)\nload()\ndraw()",
        "detail": "Python.working_games.tiles",
        "documentation": {}
    },
    {
        "label": "tiles",
        "kind": 5,
        "importPath": "Python.working_games.tiles",
        "description": "Python.working_games.tiles",
        "peekOfCode": "tiles = {}\nneighbors = [\n    vector(100, 0),\n    vector(-100, 0),\n    vector(0, 100),\n    vector(0, -100),\n]\ndef load():\n    \"\"\"Load tiles and scramble.\"\"\"\n    count = 1",
        "detail": "Python.working_games.tiles",
        "documentation": {}
    },
    {
        "label": "neighbors",
        "kind": 5,
        "importPath": "Python.working_games.tiles",
        "description": "Python.working_games.tiles",
        "peekOfCode": "neighbors = [\n    vector(100, 0),\n    vector(-100, 0),\n    vector(0, 100),\n    vector(0, -100),\n]\ndef load():\n    \"\"\"Load tiles and scramble.\"\"\"\n    count = 1\n    for y in range(-200, 200, 100):",
        "detail": "Python.working_games.tiles",
        "documentation": {}
    },
    {
        "label": "inside",
        "kind": 2,
        "importPath": "Python.working_games.tron",
        "description": "Python.working_games.tron",
        "peekOfCode": "def inside(head):\n    \"\"\"Return True if head inside screen.\"\"\"\n    return -200 < head.x < 200 and -200 < head.y < 200\ndef draw():\n    \"\"\"Advance players and draw game.\"\"\"\n    p1xy.move(p1aim)\n    p1head = p1xy.copy()\n    p2xy.move(p2aim)\n    p2head = p2xy.copy()\n    if not inside(p1head) or p1head in p2body:",
        "detail": "Python.working_games.tron",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "Python.working_games.tron",
        "description": "Python.working_games.tron",
        "peekOfCode": "def draw():\n    \"\"\"Advance players and draw game.\"\"\"\n    p1xy.move(p1aim)\n    p1head = p1xy.copy()\n    p2xy.move(p2aim)\n    p2head = p2xy.copy()\n    if not inside(p1head) or p1head in p2body:\n        print('Player blue wins!')\n        return\n    if not inside(p2head) or p2head in p1body:",
        "detail": "Python.working_games.tron",
        "documentation": {}
    },
    {
        "label": "p1xy",
        "kind": 5,
        "importPath": "Python.working_games.tron",
        "description": "Python.working_games.tron",
        "peekOfCode": "p1xy = vector(-100, 0)\np1aim = vector(4, 0)\np1body = set()\np2xy = vector(100, 0)\np2aim = vector(-4, 0)\np2body = set()\ndef inside(head):\n    \"\"\"Return True if head inside screen.\"\"\"\n    return -200 < head.x < 200 and -200 < head.y < 200\ndef draw():",
        "detail": "Python.working_games.tron",
        "documentation": {}
    },
    {
        "label": "p1aim",
        "kind": 5,
        "importPath": "Python.working_games.tron",
        "description": "Python.working_games.tron",
        "peekOfCode": "p1aim = vector(4, 0)\np1body = set()\np2xy = vector(100, 0)\np2aim = vector(-4, 0)\np2body = set()\ndef inside(head):\n    \"\"\"Return True if head inside screen.\"\"\"\n    return -200 < head.x < 200 and -200 < head.y < 200\ndef draw():\n    \"\"\"Advance players and draw game.\"\"\"",
        "detail": "Python.working_games.tron",
        "documentation": {}
    },
    {
        "label": "p1body",
        "kind": 5,
        "importPath": "Python.working_games.tron",
        "description": "Python.working_games.tron",
        "peekOfCode": "p1body = set()\np2xy = vector(100, 0)\np2aim = vector(-4, 0)\np2body = set()\ndef inside(head):\n    \"\"\"Return True if head inside screen.\"\"\"\n    return -200 < head.x < 200 and -200 < head.y < 200\ndef draw():\n    \"\"\"Advance players and draw game.\"\"\"\n    p1xy.move(p1aim)",
        "detail": "Python.working_games.tron",
        "documentation": {}
    },
    {
        "label": "p2xy",
        "kind": 5,
        "importPath": "Python.working_games.tron",
        "description": "Python.working_games.tron",
        "peekOfCode": "p2xy = vector(100, 0)\np2aim = vector(-4, 0)\np2body = set()\ndef inside(head):\n    \"\"\"Return True if head inside screen.\"\"\"\n    return -200 < head.x < 200 and -200 < head.y < 200\ndef draw():\n    \"\"\"Advance players and draw game.\"\"\"\n    p1xy.move(p1aim)\n    p1head = p1xy.copy()",
        "detail": "Python.working_games.tron",
        "documentation": {}
    },
    {
        "label": "p2aim",
        "kind": 5,
        "importPath": "Python.working_games.tron",
        "description": "Python.working_games.tron",
        "peekOfCode": "p2aim = vector(-4, 0)\np2body = set()\ndef inside(head):\n    \"\"\"Return True if head inside screen.\"\"\"\n    return -200 < head.x < 200 and -200 < head.y < 200\ndef draw():\n    \"\"\"Advance players and draw game.\"\"\"\n    p1xy.move(p1aim)\n    p1head = p1xy.copy()\n    p2xy.move(p2aim)",
        "detail": "Python.working_games.tron",
        "documentation": {}
    },
    {
        "label": "p2body",
        "kind": 5,
        "importPath": "Python.working_games.tron",
        "description": "Python.working_games.tron",
        "peekOfCode": "p2body = set()\ndef inside(head):\n    \"\"\"Return True if head inside screen.\"\"\"\n    return -200 < head.x < 200 and -200 < head.y < 200\ndef draw():\n    \"\"\"Advance players and draw game.\"\"\"\n    p1xy.move(p1aim)\n    p1head = p1xy.copy()\n    p2xy.move(p2aim)\n    p2head = p2xy.copy()",
        "detail": "Python.working_games.tron",
        "documentation": {}
    },
    {
        "label": "inside",
        "kind": 2,
        "importPath": "Python.working_games.typing",
        "description": "Python.working_games.typing",
        "peekOfCode": "def inside(point):\n    \"\"\"Return True if point on screen.\"\"\"\n    return -200 < point.x < 200 and -200 < point.y < 200\ndef draw():\n    \"\"\"Draw letters.\"\"\"\n    clear()\n    for target, letter in zip(targets, letters):\n        goto(target.x, target.y)\n        write(letter, align='center', font=('Consolas', 20, 'normal'))\n    update()",
        "detail": "Python.working_games.typing",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "Python.working_games.typing",
        "description": "Python.working_games.typing",
        "peekOfCode": "def draw():\n    \"\"\"Draw letters.\"\"\"\n    clear()\n    for target, letter in zip(targets, letters):\n        goto(target.x, target.y)\n        write(letter, align='center', font=('Consolas', 20, 'normal'))\n    update()\ndef move():\n    \"\"\"Move letters.\"\"\"\n    if randrange(20) == 0:",
        "detail": "Python.working_games.typing",
        "documentation": {}
    },
    {
        "label": "move",
        "kind": 2,
        "importPath": "Python.working_games.typing",
        "description": "Python.working_games.typing",
        "peekOfCode": "def move():\n    \"\"\"Move letters.\"\"\"\n    if randrange(20) == 0:\n        x = randrange(-150, 150)\n        target = vector(x, 200)\n        targets.append(target)\n        letter = choice(ascii_lowercase)\n        letters.append(letter)\n    for target in targets:\n        target.y -= 1",
        "detail": "Python.working_games.typing",
        "documentation": {}
    },
    {
        "label": "press",
        "kind": 2,
        "importPath": "Python.working_games.typing",
        "description": "Python.working_games.typing",
        "peekOfCode": "def press(key):\n    \"\"\"Press key.\"\"\"\n    global score\n    if key in letters:\n        score += 1\n        pos = letters.index(key)\n        del targets[pos]\n        del letters[pos]\n    else:\n        score -= 1",
        "detail": "Python.working_games.typing",
        "documentation": {}
    },
    {
        "label": "targets",
        "kind": 5,
        "importPath": "Python.working_games.typing",
        "description": "Python.working_games.typing",
        "peekOfCode": "targets = []\nletters = []\nscore = 0\ndef inside(point):\n    \"\"\"Return True if point on screen.\"\"\"\n    return -200 < point.x < 200 and -200 < point.y < 200\ndef draw():\n    \"\"\"Draw letters.\"\"\"\n    clear()\n    for target, letter in zip(targets, letters):",
        "detail": "Python.working_games.typing",
        "documentation": {}
    },
    {
        "label": "letters",
        "kind": 5,
        "importPath": "Python.working_games.typing",
        "description": "Python.working_games.typing",
        "peekOfCode": "letters = []\nscore = 0\ndef inside(point):\n    \"\"\"Return True if point on screen.\"\"\"\n    return -200 < point.x < 200 and -200 < point.y < 200\ndef draw():\n    \"\"\"Draw letters.\"\"\"\n    clear()\n    for target, letter in zip(targets, letters):\n        goto(target.x, target.y)",
        "detail": "Python.working_games.typing",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "Python.working_games.typing",
        "description": "Python.working_games.typing",
        "peekOfCode": "score = 0\ndef inside(point):\n    \"\"\"Return True if point on screen.\"\"\"\n    return -200 < point.x < 200 and -200 < point.y < 200\ndef draw():\n    \"\"\"Draw letters.\"\"\"\n    clear()\n    for target, letter in zip(targets, letters):\n        goto(target.x, target.y)\n        write(letter, align='center', font=('Consolas', 20, 'normal'))",
        "detail": "Python.working_games.typing",
        "documentation": {}
    },
    {
        "label": "draw_keys",
        "kind": 2,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "def draw_keys():\n    x = 0\n    y = 0\n    for i in range(len(WHITE_KEY_MAP)):\n        if WHITE_KEY_MAP[i] == ' ':\n            continue\n        key_rect = pygame.Rect(x, y, WHITE_KEY_WIDTH, WHITE_KEY_HEIGHT)\n        pygame.draw.rect(screen, WHITE, key_rect)\n        if pressed_keys[WHITE_KEY_MAP[i]]:\n            pygame.draw.rect(screen, RED, key_rect, 3)",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "SCREEN_WIDTH",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "SCREEN_WIDTH = 800\nSCREEN_HEIGHT = 200\nWHITE_KEY_WIDTH = 50\nWHITE_KEY_HEIGHT = 200\nBLACK_KEY_WIDTH = 30\nBLACK_KEY_HEIGHT = 120\n# Define colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "SCREEN_HEIGHT",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "SCREEN_HEIGHT = 200\nWHITE_KEY_WIDTH = 50\nWHITE_KEY_HEIGHT = 200\nBLACK_KEY_WIDTH = 30\nBLACK_KEY_HEIGHT = 120\n# Define colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\n# Define key mappings",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "WHITE_KEY_WIDTH",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "WHITE_KEY_WIDTH = 50\nWHITE_KEY_HEIGHT = 200\nBLACK_KEY_WIDTH = 30\nBLACK_KEY_HEIGHT = 120\n# Define colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\n# Define key mappings\nWHITE_KEY_MAP = \"ZXCVBNM,./QWERTYUIOP[]\"",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "WHITE_KEY_HEIGHT",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "WHITE_KEY_HEIGHT = 200\nBLACK_KEY_WIDTH = 30\nBLACK_KEY_HEIGHT = 120\n# Define colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\n# Define key mappings\nWHITE_KEY_MAP = \"ZXCVBNM,./QWERTYUIOP[]\"\nBLACK_KEY_MAP = \"SDGHJL;12356890-=\"",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "BLACK_KEY_WIDTH",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "BLACK_KEY_WIDTH = 30\nBLACK_KEY_HEIGHT = 120\n# Define colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\n# Define key mappings\nWHITE_KEY_MAP = \"ZXCVBNM,./QWERTYUIOP[]\"\nBLACK_KEY_MAP = \"SDGHJL;12356890-=\"\n# Initialize pygame",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "BLACK_KEY_HEIGHT",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "BLACK_KEY_HEIGHT = 120\n# Define colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\n# Define key mappings\nWHITE_KEY_MAP = \"ZXCVBNM,./QWERTYUIOP[]\"\nBLACK_KEY_MAP = \"SDGHJL;12356890-=\"\n# Initialize pygame\npygame.init()",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "WHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nRED = (255, 0, 0)\n# Define key mappings\nWHITE_KEY_MAP = \"ZXCVBNM,./QWERTYUIOP[]\"\nBLACK_KEY_MAP = \"SDGHJL;12356890-=\"\n# Initialize pygame\npygame.init()\n# Load sounds\nC4_SOUND = pygame.mixer.Sound(\"C4.mp3\")",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "BLACK = (0, 0, 0)\nRED = (255, 0, 0)\n# Define key mappings\nWHITE_KEY_MAP = \"ZXCVBNM,./QWERTYUIOP[]\"\nBLACK_KEY_MAP = \"SDGHJL;12356890-=\"\n# Initialize pygame\npygame.init()\n# Load sounds\nC4_SOUND = pygame.mixer.Sound(\"C4.mp3\")\nD4_SOUND = pygame.mixer.Sound(\"D4.mp3\")",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "RED = (255, 0, 0)\n# Define key mappings\nWHITE_KEY_MAP = \"ZXCVBNM,./QWERTYUIOP[]\"\nBLACK_KEY_MAP = \"SDGHJL;12356890-=\"\n# Initialize pygame\npygame.init()\n# Load sounds\nC4_SOUND = pygame.mixer.Sound(\"C4.mp3\")\nD4_SOUND = pygame.mixer.Sound(\"D4.mp3\")\n# Initialize screen",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "WHITE_KEY_MAP",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "WHITE_KEY_MAP = \"ZXCVBNM,./QWERTYUIOP[]\"\nBLACK_KEY_MAP = \"SDGHJL;12356890-=\"\n# Initialize pygame\npygame.init()\n# Load sounds\nC4_SOUND = pygame.mixer.Sound(\"C4.mp3\")\nD4_SOUND = pygame.mixer.Sound(\"D4.mp3\")\n# Initialize screen\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Simple Piano App\")",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "BLACK_KEY_MAP",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "BLACK_KEY_MAP = \"SDGHJL;12356890-=\"\n# Initialize pygame\npygame.init()\n# Load sounds\nC4_SOUND = pygame.mixer.Sound(\"C4.mp3\")\nD4_SOUND = pygame.mixer.Sound(\"D4.mp3\")\n# Initialize screen\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Simple Piano App\")\n# Function to draw keys",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "C4_SOUND",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "C4_SOUND = pygame.mixer.Sound(\"C4.mp3\")\nD4_SOUND = pygame.mixer.Sound(\"D4.mp3\")\n# Initialize screen\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Simple Piano App\")\n# Function to draw keys\ndef draw_keys():\n    x = 0\n    y = 0\n    for i in range(len(WHITE_KEY_MAP)):",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "D4_SOUND",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "D4_SOUND = pygame.mixer.Sound(\"D4.mp3\")\n# Initialize screen\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Simple Piano App\")\n# Function to draw keys\ndef draw_keys():\n    x = 0\n    y = 0\n    for i in range(len(WHITE_KEY_MAP)):\n        if WHITE_KEY_MAP[i] == ' ':",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\npygame.display.set_caption(\"Simple Piano App\")\n# Function to draw keys\ndef draw_keys():\n    x = 0\n    y = 0\n    for i in range(len(WHITE_KEY_MAP)):\n        if WHITE_KEY_MAP[i] == ' ':\n            continue\n        key_rect = pygame.Rect(x, y, WHITE_KEY_WIDTH, WHITE_KEY_HEIGHT)",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "running = True\nclock = pygame.time.Clock()\npressed_keys = {key: False for key in (WHITE_KEY_MAP + BLACK_KEY_MAP)}\nwhile running:\n    screen.fill(WHITE)\n    draw_keys()\n    pygame.display.flip()\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            running = False",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "clock = pygame.time.Clock()\npressed_keys = {key: False for key in (WHITE_KEY_MAP + BLACK_KEY_MAP)}\nwhile running:\n    screen.fill(WHITE)\n    draw_keys()\n    pygame.display.flip()\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            running = False\n        elif event.type == KEYDOWN:",
        "detail": "experiments.piano",
        "documentation": {}
    },
    {
        "label": "pressed_keys",
        "kind": 5,
        "importPath": "experiments.piano",
        "description": "experiments.piano",
        "peekOfCode": "pressed_keys = {key: False for key in (WHITE_KEY_MAP + BLACK_KEY_MAP)}\nwhile running:\n    screen.fill(WHITE)\n    draw_keys()\n    pygame.display.flip()\n    for event in pygame.event.get():\n        if event.type == QUIT:\n            running = False\n        elif event.type == KEYDOWN:\n            if event.key in pressed_keys:",
        "detail": "experiments.piano",
        "documentation": {}
    }
]